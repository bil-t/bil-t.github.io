<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | Bilal El Tayara]]></title>
  <link href="http://bilal.eltayara.net/blog/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://bilal.eltayara.net/"/>
  <updated>2017-07-27T21:23:15+00:00</updated>
  <id>http://bilal.eltayara.net/</id>
  <author>
    <name><![CDATA[El Tayara Bilal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up Wordpress on a Vagrant box]]></title>
    <link href="http://bilal.eltayara.net/blog/2015/05/30/setting-up-wordpress-on-a-vagrant-box/"/>
    <updated>2015-05-30T08:50:16+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2015/05/30/setting-up-wordpress-on-a-vagrant-box</id>
    <content type="html"><![CDATA[<p>I recently wanted to try <a href="http://wordpress.org">Wordpress</a> and explore its features.
For this I chose to install it an all its dependencies in a Vagrant box.<br/>
I followed the official <a href="http://codex.wordpress.org/Installing_WordPress">install instructions</a> and automated everything in provisioning shell scripts.</p>

<p><img class="center" src="/images/2015-05-30-setting-up-wordpress-on-a-vagrant-box/vagrant+wordpress.png"></p>

<!-- more -->


<p>Running <a href="http://wordpress.org">Wordpress</a> requires a web server, php support and a <a href="https://www.mysql.com/">MySQL</a> database.<br/>
I chose use <a href="http://www.ubuntu.com/">Ubuntu</a> as the box operating system. As a web server I chose to use the <a href="http://httpd.apache.org/">Apache HTTP Server</a>.</p>

<p>My provisioning strategy consisted of two shell scripts.
The first script called provision_once.sh is run only upon the box creation, and has privileged user rights. The second script called provision_always.sh is ran each time the box starts with a non privileged user rights.<br/>
This is specified in the Vagrant configuration file as follows:</p>

<pre><code>config.vm.provision "shell", path: "vagrant/provision_once.sh"
config.vm.provision "shell", path: "vagrant/provision_always.sh", run: "always", privileged: "false"  
</code></pre>

<p>The first part of provision_once.sh script installs required dependencies listed above:</p>

<pre><code>apt-get -qq -y update
apt-get -qq -y install apache2
apt-get -qq -y install php5 
apt-get -qq -y install php5-mysq  
</code></pre>

<p>After installing the <a href="https://www.mysql.com/">MySQL</a> server, I needed to configure it, and create the required <a href="http://wordpress.org">Wordpress</a> database.<br/>
To setup the root password for the <a href="https://www.mysql.com/">MySQL</a> server in attended way, one can use debconf-set-selections as shown below. I chose to go with no password as I was setting this up just for test purposes. <br/>
But this would have been too simple, as I expected the unexpected happened. The installation of the <a href="https://www.mysql.com/">MySQL</a> server didn&rsquo;t go as planned. The <a href="https://www.mysql.com/">MySQL</a> server was failing to start. The failure was only happening upon the box creation, doing manually the same steps was installing the <a href="https://www.mysql.com/">MySQL</a> server correctly.<br/>
After several attempts the only workaround I found was to perform the installation twice in the provisioning script:</p>

<pre><code>for i in {1..2}  
do
    debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password password '  
    debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password_again password '  
    apt-get -qq -y install mysql-server  
done  
</code></pre>

<p>Creating the database is rather straight forward using the <a href="https://www.mysql.com/">MySQL</a> command-line tool:</p>

<pre><code>mysql -uroot -e "CREATE DATABASE $DBNAME"
mysql -uroot -e "GRANT ALL PRIVILEGES ON $DBNAME.* to '$DBUSER'@'localhost' IDENTIFIED BY '$DBPASSWD'"  
mysql -uroot -e "FLUSH PRIVILEGES"
</code></pre>

<p>Next I needed to automate the download and the configuration of the Wordpress instance.<br/>
The part shown below will download and expand the latest <a href="http://wordpress.org">Wordpress</a> version from the official site.  It&rsquo;ll also configure <a href="http://wordpress.org">Wordpress</a> to use the <a href="https://www.mysql.com/">MySQL</a> database created earlier and generate the required authentication salts.</p>

<pre><code>cd /vagrant
wget -q https://wordpress.org/latest.tar.gz
tar -xzvf latest.tar.gz 
rm -f latest.tar.gz
cd wordpress
cp wp-config-sample.php wp-config.php   
sed -i.bak -u "s/database_name_here/$DBNAME/g" wp-config.php
sed -i.bak -u "s/username_here/$DBUSER/g" wp-config.php
sed -i.bak -u "s/password_here/$DBPASSWD/g" wp-config.php   
for i in {1..8}
do
    NEW_UUID=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1)
    sed -i.bak -u "0,/put your unique phrase here/s//$NEW_UUID/" wp-config.php      
done
</code></pre>

<p>Finally I needed to point the <a href="http://httpd.apache.org/">Apache HTTP Server</a> to the <a href="http://wordpress.org">Wordpress</a> site, this can be achieved as follows:</p>

<pre><code>sed -i.bak -u 's,/var/www/html,/vagrant/wordpress,g' /etc/apache2/sites-available/000-default.conf

echo '&lt;Directory /vagrant/wordpress&gt;' &gt;&gt; /etc/apache2/apache2.conf
echo '  Options Indexes FollowSymLinks' &gt;&gt; /etc/apache2/apache2.conf
echo '  AllowOverride None' &gt;&gt; /etc/apache2/apache2.conf
echo '  Require all granted' &gt;&gt; /etc/apache2/apache2.conf
echo '&lt;/Directory&gt;' &gt;&gt; /etc/apache2/apache2.conf

service apache2 restart
</code></pre>

<p>The provision always script is simple, it just make sure that the <a href="https://www.mysql.com/">MySQL</a> is up running upon the box start-up.</p>

<pre><code>if [[ ! "$(sudo service mysql status)" =~ "start/running" ]]
then
    sudo service mysql start
fi
</code></pre>

<p>Finally redirecting the port 80 to the host, makes the <a href="http://wordpress.org">Wordpress</a> instance accessible from the browser, and ready to use.</p>

<p><img class="center" src="/images/2015-05-30-setting-up-wordpress-on-a-vagrant-box/wordpress-install.png"></p>

<p>The complete configuration is available at my <a href="https://github.com/bil-t/wordpress-vagrant">wordpress-vagrant</a> GitHub repository.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant Powered Perforce]]></title>
    <link href="http://bilal.eltayara.net/blog/2015/05/20/vagrant-powered-perforce/"/>
    <updated>2015-05-20T19:48:11+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2015/05/20/vagrant-powered-perforce</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2015-05-20-vagrant-powered-perforce/vagrant+perforce.png"></p>

<p>After attending the <a href="https://open.hpi.de/courses/softwareanalytics2015/" title="Automated Visual Software Analytics">Automated Visual Software Analytics </a> online course I had an idea on computing some new metrics deduced from the VCS (<a href="http://en.wikipedia.org/wiki/Revision_control" title="VCS">Version Control System</a>).</p>

<p>Since I want to make use of these metrics at work, my implementation should be
able to work against a <a href="http://www.perforce.com/" title="Perforce.com">Perforce</a> server, the VCS we mainly use.</p>

<!-- more -->


<p>In order to have the appropriate development environment I needed a Linux virtual machine on which Perforce is installed, configured an running properly.
I had previously used <a href="blog/2015/05/01/an-octopress-slash-vagrant-experiment/" title="An Octopress/Vagrant Experiment">Vagrant</a> to sandbox a development environment, and at that moment I knew it was the beginning of a long-term addiction.</p>

<p>Fortunately for me, Perforce can be downloaded free for up to 20 users.<br/>
My goal was to configure a virtual machine via Vagrant and provision it by installing a perforce server, running it and make it accessible from the host machine.</p>

<p>Interested ? Here&rsquo;s how to do it.</p>

<h2>1. Port Forwarding: Configuration</h2>

<p><figure class='code'><figcaption><span> (Vagrantfile)</span> <a href='/downloads/code/2015-05-20-vagrant-powered-perforce/Vagrantfile'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="vg">Vagrant</span><span class="o">.</span><span class="vg">configure</span><span class="p">(</span><span class="il">2</span><span class="p">)</span><span class="w"> </span><span class="vg">do</span><span class="w"> </span><span class="o">|</span><span class="vg">config</span><span class="o">|</span>
</span><span class='line'><span class="w">  </span><span class="vg">config</span><span class="o">.</span><span class="vg">vm</span><span class="o">.</span><span class="vg">box</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">&quot;ubuntu/trusty64&quot;</span>
</span><span class='line'><span class="w">  </span><span class="vg">config</span><span class="o">.</span><span class="vg">ssh</span><span class="o">.</span><span class="vg">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="il">2223</span><span class="w">  </span>
</span><span class='line'><span class="w">  </span><span class="vg">config</span><span class="o">.</span><span class="vg">ssh</span><span class="o">.</span><span class="vg">forward_agent</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="vg">true</span>
</span><span class='line'><span class="w">  </span><span class="vg">config</span><span class="o">.</span><span class="vg">ssh</span><span class="o">.</span><span class="vg">forward_x11</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="vg">true</span>
</span><span class='line'><span class="w">  </span><span class="vg">config</span><span class="o">.</span><span class="vg">vm</span><span class="o">.</span><span class="vg">network</span><span class="w"> </span><span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span><span class="w"> </span><span class="nl">guest:</span><span class="w"> </span><span class="il">1666</span><span class="p">,</span><span class="w"> </span><span class="nl">host:</span><span class="w"> </span><span class="il">1666</span>
</span><span class='line'><span class="w">  </span><span class="vg">config</span><span class="o">.</span><span class="vg">vm</span><span class="o">.</span><span class="vg">network</span><span class="w"> </span><span class="o">:</span><span class="vg">forwarded_port</span><span class="p">,</span><span class="w"> </span><span class="nl">guest:</span><span class="w"> </span><span class="il">22</span><span class="p">,</span><span class="w"> </span><span class="nl">host:</span><span class="w"> </span><span class="il">2222</span><span class="p">,</span><span class="w"> </span><span class="nl">id:</span><span class="w"> </span><span class="s2">&quot;ssh&quot;</span><span class="p">,</span><span class="w"> </span><span class="nl">disabled:</span><span class="w"> </span><span class="vg">true</span>
</span><span class='line'><span class="w">  </span><span class="vg">config</span><span class="o">.</span><span class="vg">vm</span><span class="o">.</span><span class="vg">network</span><span class="w"> </span><span class="o">:</span><span class="vg">forwarded_port</span><span class="p">,</span><span class="w"> </span><span class="nl">guest:</span><span class="w"> </span><span class="il">22</span><span class="p">,</span><span class="w"> </span><span class="nl">host:</span><span class="w"> </span><span class="il">2223</span><span class="p">,</span><span class="w"> </span><span class="nl">auto_correct:</span><span class="w"> </span><span class="vg">true</span>
</span><span class='line'><span class="w">  </span><span class="vg">config</span><span class="o">.</span><span class="vg">vm</span><span class="o">.</span><span class="vg">provision</span><span class="w"> </span><span class="s2">&quot;shell&quot;</span><span class="p">,</span><span class="w"> </span><span class="nl">path:</span><span class="w"> </span><span class="s2">&quot;vagrant/provision_once.sh&quot;</span>
</span><span class='line'><span class="w">  </span><span class="vg">config</span><span class="o">.</span><span class="vg">vm</span><span class="o">.</span><span class="vg">provision</span><span class="w"> </span><span class="s2">&quot;shell&quot;</span><span class="p">,</span><span class="w"> </span><span class="nl">path:</span><span class="w"> </span><span class="s2">&quot;vagrant/provision_always.sh&quot;</span><span class="p">,</span><span class="w"> </span><span class="nl">run:</span><span class="w"> </span><span class="s2">&quot;always&quot;</span><span class="p">,</span><span class="w"> </span><span class="nl">privileged:</span><span class="w"> </span><span class="s2">&quot;false&quot;</span>
</span><span class='line'><span class="vg">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Since I was already using a Vagrant virtual machine I had to pay attention to using a different set of ports.
The SSH port forwarding is bound, out of the box, to 2222. It was not clear in the documentation how to disable it. After several attempts and some googling I ended up by finding the right way to do it. For it to work you need to add the following two entries in the Vagrant file:</p>

<p><code>config.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh", disabled: true</code>  <br/>
<code>config.vm.network :forwarded_port, guest: 22, host: 2223, auto_correct: true</code></p>

<p>Perforce uses by default the port 1666, I chose to use the same port when forwarding it to the host.</p>

<h2>2. Provisioning: Installing and starting Perfoce</h2>

<p>Next I had to install perforce and run it. I was lucky enough to stumble upon an article that revealed to me the existence of a public Perforce FTP server.</p>

<p>Knowing that, I used a first provisioning shell script to download the perforce server binary (p4d) and its command line client (p4).</p>

<p><figure class='code'><figcaption><span> (provision_once.sh)</span> <a href='/downloads/code/2015-05-20-vagrant-powered-perforce/provision_once.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash -x</span>
</span><span class='line'>apt-get update
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&quot;/usr/local/p4root&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>	mkdir /usr/local/p4root
</span><span class='line'>	<span class="nb">cd</span> /usr/local/bin/
</span><span class='line'>	wget -q ftp://ftp.perforce.com/perforce/r15.1/bin.linux26x86_64/p4d
</span><span class='line'>	wget -q ftp://ftp.perforce.com/perforce/r15.1/bin.linux26x86_64/p4
</span><span class='line'>	chmod +x p4d
</span><span class='line'>	chmod +x p4
</span><span class='line'>	<span class="nb">echo</span> <span class="s1">&#39;P4PORT=tcp4:127.0.0.1:1666&#39;</span> &gt;&gt; /etc/environment
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>A second provisioning script, executed with a non privileged user, starts the Perforce server and does a connection attempt.</p>

<p><figure class='code'><figcaption><span> (provision_always.sh)</span> <a href='/downloads/code/2015-05-20-vagrant-powered-perforce/provision_always.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash -x</span>
</span><span class='line'><span class="nb">export </span><span class="nv">P4PORT</span><span class="o">=</span>tcp4:127.0.0.1:1666
</span><span class='line'>sudo p4d -r /usr/local/p4root <span class="p">&amp;</span>
</span><span class='line'>sleep 3
</span><span class='line'>p4 info
</span></code></pre></td></tr></table></div></figure></p>

<p>This script is configured to run at each restart of the virtual machine to make sure that the Perforce server is always started.</p>

<h2>3. Accessing Perforce from host</h2>

<p>It&rsquo;s worth to note that if the second provisioning script is ran with a privileged user
the connection from the host was failing. I took me some time to figure out that starting the perforce server with the non privileged user, is the solution. I didn&rsquo;t understand the reason behind it but I was glad it was working.<br/>
With that in place, the Perforce command line client running on the host machine was able to connect to the Perforce server running on the guest machine with no trouble.</p>

<p><img class="center" src="/images/2015-05-20-vagrant-powered-perforce/p4-client-host.png"></p>

<p>Want to try it ? Fork it from <a href="https://github.com/bil-t/vagrant-perforce-provisioning.git">vagrant-perforce-provisioning</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Octopress/Vagrant Experiment]]></title>
    <link href="http://bilal.eltayara.net/blog/2015/05/01/an-octopress-slash-vagrant-experiment/"/>
    <updated>2015-05-01T22:52:06+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2015/05/01/an-octopress-slash-vagrant-experiment</id>
    <content type="html"><![CDATA[<p>In my spare time, I like to try and learn new software technologies.
For this I use my Windows laptop. The problem is that after several cycles of installing and removing stuff, the laptop become slow. Its performance keep degrading with time until I take some time to reset its installation and reconfigure things.</p>

<p>Recently, after struggling with ruby installation on Windows I decided to reconsider Linux. Since I needed windows for other reasons, I decided to try using virtualization. I started by using <a href="https://www.virtualbox.org/">VirtualBox</a> to configure a Linux guest machine. While discussing this with a friend, he suggested trying <a href="https://www.vagrantup.com/">Vagrant</a>.</p>

<!-- more -->


<p>I visited <a href="https://www.vagrantup.com/">Vagrant</a> website and it immediately got my attention for its simplicity. All you need is a configuration file, a small set of commands and the virtual machine is up an running.<br/>
Playing around with Vagrant tutorial lead me to the idea of creating a sandbox for each software development experiment or project I work on.</p>

<p>I decided to test the idea of this sandbox on my next project: this blog.<br/>
As many software developers I settled on using <a href="http://octopress.org/">Octopress</a>/<a href="https://github.com/">GitHub</a> for my blog.<br/>
For this purpose, I needed a Linux machine with the required tools installed and a synced copy of the blog source. After several iteration I got to a stage where I&rsquo;m able to edit the blog from any computer connected to the internet. <br/>
In three steps I&rsquo;m able to deploy a blog sandbox and start blogging:</p>

<ol>
<li>First, install required tools: <a href="http://git-scm.com/">git</a>, <a href="https://www.virtualbox.org/">VirtualBox</a> and <a href="https://www.vagrantup.com/">Vagrant</a>.</li>
<li>Second, clone the blog repository,</li>
<li>Finally, start the sandbox by switching to its directory and running Vagrant up</li>
</ol>


<p>It took me some time to get to a simple and repeatable process.
I&rsquo;m glad of the results as I&rsquo;m using the sandbox to publish this post. This experiment showed me the real benefits from using <a href="https://www.vagrantup.com/">Vagrant</a> and I&rsquo;m pretty sure I&rsquo;ll be using it in future projects.</p>

<p>Although this post is not intended to be a tutorial on how to use <a href="https://www.vagrantup.com/">Vagrant</a> or <a href="http://octopress.org/">Octopress</a>, I&rsquo;m going to mention a couple of things I found interesting. I&rsquo;ll also write about some difficulties I encountered and how I solved them.</p>

<h3>What I liked most</h3>

<ul>
<li><strong>Easy X11 forwarding over SSH connections</strong> by adding <code>config.ssh.forward_x11 = true</code> to Vagranfile. With <a href="http://mobaxterm.mobatek.net/">MobaXterm</a> running on my Windows host I was able to display the guest.</li>
<li><strong>Easy port forwarding</strong> by adding <code>config.vm.network "forwarded_port", guest: 4000, host: 4000</code> all traffic network to the port 4000 on the host machine, was actually forwarded to the guest machine on the specified port.</li>
<li><strong><a href="http://docs.vagrantup.com/v2/synced-folders/">Vagrant synced folder</a></strong> enables editing the files from both the guest and the host.</li>
</ul>


<h3>What took me some time to figure out</h3>

<ul>
<li><p><strong>Shell provisioner as <code>vagrant</code> user</strong> and not as root: using <code>privileged false</code> in Vagrantfile didn&rsquo;t work for me when setting local version of Ruby via rbenv. I finally settled on chaining a call to a script with the specified user <code>su -c "source /vagrant/vagrant/user-config.sh" vagrant</code></p></li>
<li><p><strong>Blog preview only accessible from guest</strong>, at first I thought it was a problem with port forwarding, but finally, after tedious searches on the internet, I found out that binding the server to 0.0.0.0 in Rakefile was the solution. <br/>
<code>server_host     = "0.0.0.0"   # server bind address for preview server</code><br/>
<code>rackupPid = Process.spawn("rackup --host #{server_host} --port #{server_port}")</code></p></li>
</ul>


<p>If you&rsquo;re interessted in trying, the complete configuration is available in the  <a href="https://github.com/bil-t/octopress-vagrant-setup">octopress-vagrant-setup</a> github repository.</p>
]]></content>
  </entry>
  
</feed>
