<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: productivity | Bilal El Tayara]]></title>
  <link href="http://bil-t.github.io/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://bil-t.github.io/"/>
  <updated>2015-05-14T20:38:59+00:00</updated>
  <id>http://bil-t.github.io/</id>
  <author>
    <name><![CDATA[El Tayara Bilal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[3 Things Every Software Development Manager Should Do]]></title>
    <link href="http://bil-t.github.io/blog/2015/05/13/3-things-every-software-development-manager-should-do/"/>
    <updated>2015-05-13T20:07:01+00:00</updated>
    <id>http://bil-t.github.io/blog/2015/05/13/3-things-every-software-development-manager-should-do</id>
    <content type="html"><![CDATA[<p>Here are three practices that I found to be of a great help in my day-to-day work as software development manager.</p>

<!-- more -->


<p></p>

<h2>Inspection is your friend</h2>

<p>It&rsquo;s crucial to know how your code source health is.
Complex code tend to have a high maintenance cost and makes entry cost higher for a newcomer. Failing to apply best practices and recommendations can result in various bugs. A poor test coverage makes future development very likely to introduce regressions.<br/>
Static and dynamic analysis are you best friends to give you accurate indicators about your code health. They also help you take appropriate actions to cure the spotted deficiencies.<br/>
If you don&rsquo;t have this yet in place, all it takes is these simple steps:<br/>
1. Start by setting up a continuous code analysis process for your source code<br/>
2. Define a quality profile and break the build whenever the quality gateway is violated<br/>
3. Every time an issue is fixed, adjust the quality gate accordingly</p>

<p><img class="center" src="/images/2015-05-13-3-things-every-software-development-manager-should-do/inspection.jpg"></p>

<h2>Better double-check</h2>

<p>Static and dynamic code analysis can help you track the source code health but when it comes to technical design they are rather limited.<br/>
When software development manager drifts away from the code because of other duties that require his attention, code review can be a good help.<br/>
By reviewing the changes regularly the software development manager can stay up to date with the design changes and can intervene at an early stage if needed.
How to do it? By a continuous automated code review generation process:<br/>
1. Automatically create a code review for each new change<br/>
2. Keep the pace, perform the review regularly</p>

<p><img class="center" src="/images/2015-05-13-3-things-every-software-development-manager-should-do/diff.jpg"></p>

<h2>Get your hands dirty</h2>

<p>Quite often the software development manager doesn&rsquo;t have room anymore for coding. Unfortunately this can make him unaware of the coding conditions, pain-points and other important factors. If the team fail to give him a comprehensive feedback this can result in negative outcomes. <br/>
My suggestion, make room to code. Besides giving you an accurate idea of the work conditions of your team, you&rsquo;ll enjoy performing what initially made you want this job.</p>

<p><img class="center" src="/images/2015-05-13-3-things-every-software-development-manager-should-do/hack.jpg"></p>

<h2><br></h2>

<p><em>photo credits:</em> <a href="https://www.flickr.com/photos/dumindaxsb/2873528646" title="On Screen Magnification by Duminda Jayasena, sur Flickr">On Screen Magnification</a> <a href="https://creativecommons.org/licenses/by/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/jblyberg/3942639156" title="My eyes are starting to hurt by John Blyberg, sur Flickr">My eyes are starting to hurt</a> <a href="https://creativecommons.org/licenses/by/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/adulau/5136853276" title="Chris Nickerson at hack.lu 2010 by Alexandre Dulaunoy, sur Flickr">Chris Nickerson at hack.lu 2010</a> <a href="https://creativecommons.org/licenses/by-sa/2.0/">(license)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Things You Can Try To Get Back Wasted Commute Time]]></title>
    <link href="http://bil-t.github.io/blog/2015/05/05/5-things-you-can-try-to-get-back-wasted-commute-time/"/>
    <updated>2015-05-05T20:52:33+00:00</updated>
    <id>http://bil-t.github.io/blog/2015/05/05/5-things-you-can-try-to-get-back-wasted-commute-time</id>
    <content type="html"><![CDATA[<p>Do you get stuck in the traffic jam everyday while commuting to work?<br/>
Would you like to make use of this wasted time? Read on.<br/>
I usually spend a couple of hours commuting to/from work every day.<br/>
Sitting behind my steering wheel listening to the radio was not very rewarding.  <br/>
So I started exploring how I could better invest this lost time.</p>

<!-- more -->


<p>
From among the things I tried, these are the once that worked well.</p>

<h3>1. <a href="https://librivox.org/">LibriVox</a></h3>

<p>LibriVox brings you free recordings of books available in the public domain.
You can listen to free audio books from any connected device or even burn them onto a CD.</p>

<p><img class="center <a" src="href="https://librivox.org/images/librivox-logo.png">https://librivox.org/images/librivox-logo.png</a>&#8221;></p>

<h3>2.  Commercial audio books</h3>

<p>If the book you&rsquo;re interesting in is not in the public domain, you might find a commercial audio version. Either on CD or a downloadable one, there are a lot of offers out <a href="http://lmgtfy.com/?q=audio+books">there</a>.</p>

<p><img class="center" src="/images/2015-05-05-5-things-you-can-try-to-get-back-wasted-commute-time/audio-book.png"></p>

<h3>3. <a href="https://www.ted.com/">Ted Talks</a></h3>

<p>Listen to free talks on a large variety of subjects. Whatever your interest is, there&rsquo;s a chance you find interesting and inspiring talks on the subject.
Ted app let you download the talks for offline viewing.</p>

<p><img class="center" src="/images/2015-05-05-5-things-you-can-try-to-get-back-wasted-commute-time/ted.png"></p>

<h3>4. Online courses</h3>

<p>If it happens that you&rsquo;re following an online course, you can make use of the commute time to listen to the courses videos. Most of the platforms let you download the videos for offline viewing. Efficiency of this approach will depend on how much you need your eyes on the screen to understand the content.
What worked for me was listening to the video while commuting, and then reading the slides once back home.</p>

<p><img class="center" src="/images/2015-05-05-5-things-you-can-try-to-get-back-wasted-commute-time/moocs.jpg"></p>

<h3>5. Google Play Books Reader</h3>

<p>You can make use of the Text-to-speech for Google Play content to read e-books.
For this you need to activate the &ldquo;Read aloud&rdquo; option form the top menu.
It only works with EPUB files, and I recommend activating the &ldquo;High quality voice&rdquo; option for a better listening experience.</p>

<p><img class="center" src="/images/2015-05-05-5-things-you-can-try-to-get-back-wasted-commute-time/google-play-books.png"></p>

<h2><br></h2>

<p><em>photo credits:</em> <a href="http://www.flickr.com/photos/74109564@N08/8119732223">Audiobook_logo_small</a> <a href="https://creativecommons.org/licenses/by-sa/2.0/">(license)</a>,
<a href="https://www.flickr.com/photos/93112746@N05/11059505474">So many MOOCs</a> <a href="https://creativecommons.org/licenses/by-sa/2.0/">(license)</a></p>
]]></content>
  </entry>
  
</feed>
