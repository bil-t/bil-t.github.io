<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: management | Bilal El Tayara]]></title>
  <link href="http://bilal.eltayara.net/blog/categories/management/atom.xml" rel="self"/>
  <link href="http://bilal.eltayara.net/"/>
  <updated>2017-05-07T17:07:45+00:00</updated>
  <id>http://bilal.eltayara.net/</id>
  <author>
    <name><![CDATA[El Tayara Bilal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Turn The Software Development Team Around With Scrum]]></title>
    <link href="http://bilal.eltayara.net/blog/2017/05/07/turn-the-software-development-team-around-with-scrum/"/>
    <updated>2017-05-07T13:56:53+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2017/05/07/turn-the-software-development-team-around-with-scrum</id>
    <content type="html"><![CDATA[<p>In his book, <a href="https://www.amazon.fr/Turn-Ship-Around-Building-Breaking/dp/0241250943">Turn The Ship Around!</a>, <a href="http://www.davidmarquet.com/">L. David Marquet</a> tells us how he transformed the culture of a united states submarine from a leader-follower culture to a leader-leader culture.<br/>
Moreover, he proves the benefits of this cultural change that made the submarine crew improve from the least to the most effective one.<br/>
While reading this book, thing that I enjoyed and recommend, I couldn&rsquo;t help but projecting the ideas explained in the book against my experience with agile software development teams and more specifically the SCRUM framework usage. The book made me see the different practices and principles used in <a href="https://www.scrumalliance.org/why-scrum/core-scrum-values-roles">SCRUM</a> under a new and interesting perspective.<br/>
I&rsquo;ll try to share this with you in this blog-post.</p>

<p><a href="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/submarine.jpg"><img class="center" src="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/submarine.jpg"></a></p>

<!-- more -->


<p>The first concept that caught my attention in the book is around <strong>control</strong>. The author speaks about the importance of delegating control and decision making authority, and provides some of mechanisms to implement this. I chose to zoom on the following ones: <strong>Short, Early Conversations Make Efficient Work</strong>, <strong>Use &ldquo;Intend to &hellip;&rdquo; to Turn Passive Followers into Active Leaders</strong>, <strong>Eliminate Top-Down Monitoring Systems</strong>, <strong>Think Out Loud</strong>.<br/>
You must be wondering by now, what does that have to do with agility and software development. Well in agile software development, autonomy is one of the main characteristics for team effectiveness, delegating control and decision making is contributing to the autonomy of the teams and individuals. It&rsquo;s clear that we are on the same page here.<br/>
Adopting short and early conversations to improve efficiency is just another way to describe the following agile principle: &ldquo;The most efficient and effective method of conveying information to and within a development team is face-to-face conversation&rdquo;. The similarities don&rsquo;t stop here, when applying SCRUM, the Daily stand-up ritual makes the team adopt the &ldquo;I intend to &hellip;&rdquo; mechanism. Moreover, SCRUM offers many opportunities for team members to adopt a &ldquo;think out loud&rdquo; mechanism, whether in backlog grooming sessions, poker estimations, sprint reviews, daily stand-ups, and retrospectives.<br/>
SCRUM teams commit on their deliveries in sprint plannings and naturally monitor and report their progress to their stakeholders in sprint reviews, thus eliminating the top down monitoring activity. It&rsquo;s not uncommon to see SCRUM teams producing indicators on their progress, the quality of their work, and making use of visual monitoring in order to share the information.</p>

<p><a href="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/la-conversation.jpg"><img class="center" src="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/la-conversation.jpg"></a></p>

<p>The second concept in the book is about <strong>competence</strong>, continuously improving it and acquiring new ones.<br/>
SCRUM enables this continuous learning approach for teams. For instance the retrospective is the dedicated ceremony in SCRUM to inspect how the team is doing and define improvement actions.  It&rsquo;s also common for effective SCRUM team to leave some &ldquo;slack&rdquo; in their backlog to work on some innovations and learning tasks. Moreover, it&rsquo;s usual  for software development teams adopting SCRUM to also adopt the extreme programming principles, the latter introduces several practices aiming to improve the teams competence like pair programming and code review. <br/>
Going back to the agile software development teams characteristics it&rsquo;s clear that with the competence concern we&rsquo;re hitting the mastery characteristic the team should have to become effective.</p>

<p><a href="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/skills.jpg"><img class="center" src="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/skills.jpg"></a></p>

<p>Last the author speaks about the <strong>clarity</strong> and it&rsquo;s importance when applying the previous principles.<br/>
In SCRUM clarity of the goals is achieved through the customer collaboration, the recurrent sprint review and sprint planning sessions. The introduction the product owner role within the team helps in clarifying the goals anytime it&rsquo;s needed. So last but not least we get to the third main characteristic necessary for an agile software development team; the purpose.</p>

<p><a href="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/clarity.jpg"><img class="center" src="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/clarity.jpg"></a></p>

<p>In summary, in Turn The Ship Around!, L. David Marquet tells a story of deploying autonomy, mastery and purpose to a submarine crew and making it improve from a below average score to the highest score. The SCRUM agile framework, when applied correctly, can help you do the same for software development teams.</p>

<p><a href="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/scrum.jpg"><img class="center" src="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/scrum.jpg"></a></p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/rascoop/5367935297/" title="US Submarine existing Curacao harbour">US Submarine existing Curacao harbour</a> <a href="https://creativecommons.org/licenses/by-nc/2.0/">(license)</a>,
<a href="https://www.flickr.com/photos/guillaume-andreux/34373378291/" title="La conversation">La conversation</a> <a href="https://creativecommons.org/licenses/by-sa/2.0/">(license)</a>,
<a href="https://www.flickr.com/photos/danielle-chang/4910485601/" title="skills">skills</a> <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">(license)</a>,
<a href="https://www.flickr.com/photos/34690904@N02/33554170264/" title="clarity">clarity</a> <a href="https://creativecommons.org/licenses/by/2.0/">(license)</a>,
<a href="https://www.flickr.com/photos/cgt/8064378807/" title="scrum">scrum</a> <a href="https://creativecommons.org/licenses/by-nc/2.0/">(license)</a>,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Agile Autonomous Teams : A Paradox ?]]></title>
    <link href="http://bilal.eltayara.net/blog/2017/02/25/managing-agile-autonomous-teams-a-paradox/"/>
    <updated>2017-02-25T18:31:50+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2017/02/25/managing-agile-autonomous-teams-a-paradox</id>
    <content type="html"><![CDATA[<p>Agile teams are known to be autonomous and self-organizing.  <br/>
When I started fostering agility and encouraging autonomy and self-organization for the teams I work with, It was only normal to to face a situation where teams decided to do things their way, under the name of autonomy and self-organization. <br/>
The problem was that the direction they were heading in was not going to lead to the collective success of the enterprise.<br/>
My role was to help them succeed, thus I had the challenge of directing them while helping them improve their agility and thus their autonomy and self organization.<br/>
Is that an impossible equation to solve ?</p>

<!-- more -->


<p>If you&rsquo;re new to agility you might think that this a proof that agility fails in an enterprise context and is only meant for a small team.<br/>
Fortunately it&rsquo;s not the case, agility, when well understood and applied, works at scale and delivers its promises.<br/>
Autonomy of agile teams is a must but it&rsquo;s not sufficient, along that, teams in an enterprise context need alignment.
Autonomy without alignment will only lead to anarchy, and this is something you don&rsquo;t want. Anarchy rarely leads to success.  <br/>
Only when both alignment and autonomy are present, agile teams can become successful.</p>

<p>This is greatly illustrated by <a href="http://blog.crisp.se/author/henrikkniberg">Henrik Kniberg</a> in the “<a href="http://blog.crisp.se/2014/03/27/henrikkniberg/spotify-engineering-culture-part-1">Spotify Engineering Culture</a>” and several of this talks.</p>

<p><a href="/images/2017-02-25-managing-agile-autonomous-teams-a-paradox/autonomy-alignment-kniberg.png"><img class="center" src="/images/2017-02-25-managing-agile-autonomous-teams-a-paradox/autonomy-alignment-kniberg.png"></a></p>

<blockquote><ul>
<li>Down here is low alignment and low autonomy. Micromanagement Culture, no high level purpose just shut up and follow orders.</li>
<li>Up here is high Alignment, but low autonomy. So leaders are good communicating what problems needs to be solved, but also they are telling people how to solve it.</li>
<li>High Alignment and High Autonomy means leaders focus on what problems to solve but let the teams figure out how to solve it</li>
<li>What about down here then? Low alignment and high autonomy. Means teams do whatever they want…</li>
</ul>
</blockquote>

<p>But how do teams get alignment ?</p>

<p>As alignment aim to make several teams work toward the same goals, it&rsquo;s by design an external factor to the teams.<br/>
Thus the teams can&rsquo;t achieve alignment on their own.<br/>
Agile managers are still an important piece of the puzzle, and fit naturally in the agile context.   <br/>
By helping teams getting alignment, they provide them with one of the necessary ingredients for their success.</p>

<p><a href="/images/2017-02-25-managing-agile-autonomous-teams-a-paradox/velib.jpg"><img class="center" src="/images/2017-02-25-managing-agile-autonomous-teams-a-paradox/velib.jpg"></a></p>

<p>I work in a fast-paced and constantly changing work environment, with geographically dispersed and culturally diverse teams, reaching alignment in such context is not an easy task. <br/>
As an agile manager I need to constantly drive alignment, in order to allow autonomy to build. It&rsquo;s about keeping the people and the work progressing in the correct direction toward to the goals, and it&rsquo;s not to be confused by staying &ldquo;on plan&rdquo;.<br/>
To accomplish this I practice consistently communicated, measurable, incremental goals.<br/>
In my next post I&rsquo;ll explain one of the tools I use to bring that guidance to the agile teams.</p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/44904381@N03/4424536847/" title="Vélib 2">Vélib 2</a> <a href="https://creativecommons.org/licenses/by-nc/2.0/">(license)</a>,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Software Development Team]]></title>
    <link href="http://bilal.eltayara.net/blog/2016/04/30/building-a-software-development-team/"/>
    <updated>2016-04-30T22:06:14+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2016/04/30/building-a-software-development-team</id>
    <content type="html"><![CDATA[<p>Trying to build an effective software development team ?
Here are some key elements that might help you.
<a href="/images/2016-04-30-building-a-software-development-team/Building_a_Software_Development_Team.png"><img class="center" src="/images/2016-04-30-building-a-software-development-team/Building_a_Software_Development_Team.png"></a></p>

<!-- more -->


<p>Building a Software Development Team</p>

<blockquote><p>SCRUM</p>

<blockquote><p>Provide a SCRUM training for the team</p>

<p>Convince all team members take the lead in a round robin fashion on the scrum ceremonies facilitation (Sprint Review &amp; Planning, Retrospectives &hellip;)</p>

<p>Define the DoR : Definition of Ready</p>

<blockquote><p>Clear Acceptance test<br/>
Shared minimal design</p></blockquote>

<p>Define the DoD : Definition of Done</p>

<blockquote><p>Build pipeline is green<br/>
Minimal documentation</p></blockquote>

<p>Regular Backlog Grooming<br/>
Poker Estimation</p>

<blockquote><p>Story point as time unit is not allowed</p></blockquote></blockquote>

<p>Ops</p>

<blockquote><p>Configure a continuous integration pipline</p>

<blockquote><p>Build (includes unit tests)<br/>
Code Inspection<br/>
Integration Tests<br/>
Performance Tests<br/>
Automate Tests</p></blockquote>

<p>Define Quality Gates</p>

<p>Build Pipline Monitor</p></blockquote>

<p>Code</p>

<blockquote><p>TDD / Test First</p>

<p>Clean Code</p>

<blockquote><p>Simple Design</p>

<blockquote><p>First make it work, then make it simple, only then make it fast<br/>
KISS<br/>
YAGNI<br/>
SOLID<br/>
Modular</p></blockquote>

<p>Understandable code</p>

<blockquote><p>Clear Naming<br/>
Comment Unclear Parts of Code<br/>
Self-documenting Code<br/>
Cohesive Methods and Classes</p></blockquote>

<p>Follow the Boy Scout Rule Leave your code better than you found it</p></blockquote></blockquote>

<p>Team Work</p>

<blockquote><p>Define Work Agreements</p>

<p>Collective Code Ownership</p>

<blockquote><p>Define Team Coding Conventions</p></blockquote>

<p>Continuous Improvement Culture</p>

<blockquote><p>Improvement and exploration tasks are part of the sprint backlog</p></blockquote></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is It Realistic To Manage Closely Several Agile Teams]]></title>
    <link href="http://bilal.eltayara.net/blog/2016/01/26/is-it-realistic-to-manage-closely-several-agile-teams/"/>
    <updated>2016-01-26T00:20:30+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2016/01/26/is-it-realistic-to-manage-closely-several-agile-teams</id>
    <content type="html"><![CDATA[<p>I have been recently promoted to manage a division in software development department of my company.<br/>
Till then I was used to managing one team at a once, not exceeding 10 people in size.<br/>
Now I find myself with 8 teams to manage having each a size ranging from 4 to 7 people.</p>

<p>In my previous role I was comfortable with adopting the SCRUM agile framework and quite used to play the role of the scrum master and to participate actively to the product owner role. <br/>
Some of the new teams were already trying to follow the agile practices, some were still working with rather a traditional waterfall approach.
So naturally I found myself driving the teams to adopt the SCRUM framework.
I made sure to share with them my return on experience and to point out the pitfalls and the small details that can make a difference.</p>

<p><img class="center" src="/images/2016-01-26-is-it-realistic-to-manage-closely-several-agile-teams/scrum.png"></p>

<p>Fortunately for me the resistance to change was less than expected. <br/>
All the teams were eager to try the new framework and to improve their agile practices.    <br/>
This is when things start to get a bit more complicated.</p>

<!-- more -->


<p></p>

<p>Among the teams that had tried agile methods, some had tried the SCRUM framework before but ended up by letting it go. Some accommodated the framework with what they thought it would suit them better and thus were practicing a modified custom version.</p>

<p>This reminded me of the caveat entitled <a href="https://books.google.fr/books?id=pjLcBAAAQBAJ&amp;pg=PT21&amp;lpg=PT21&amp;dq=%22Do+not+change+scrum%22&amp;source=bl&amp;ots=ZLjZe7HpGC&amp;sig=fZakjNenlohycnYqsULErZxMPlY&amp;hl=fr&amp;sa=X&amp;ved=0ahUKEwiVm-C3gMbKAhXLthoKHcC1AKgQ6AEIHzAA#v=onepage&amp;q&amp;f=false"><strong><em>Do not change scrum</em></strong> <em>in The Enterprise and Scrum (by Ken Schwaber)</em></a></p>

<p>Having observed that, it was clear to me that I had to bring the teams to the required level of understanding of the methodology and to help them in the adoption and ramp up phase.</p>

<p>Doing that was not a problem for me, on the contrary I enjoy playing the role of the scrum master in an agile development team. The problem was rather a capacity one, will I have enough time to do it right.</p>

<p>You might say, sure it won’t take that long to train a group of people to an agile methodology. <br/>
I can’t disagree with that, after all I had my scrum master certification after a two days training.<br/>
But what I also know, is that it took me nearly two years of practice to be able to take full advantage of the framework. So when I say doing it right, I mean working closely with each team trying to share with them what I learnt and helping them reaching the tipping point to becoming agile.</p>

<p>The couple of teams I had selected to start with showed high appreciation of the help they received and I could instantly see the difference and the positive impact on their day to day job.</p>

<p>But till now I haven’t managed to keep a regular pace to assist closely all the teams in this adoption process and this doesn’t make me feel satisfied. With all the responsibilities I have to assume I never get the time needed to accompany the teams in all of their agile ceremonies.<br/>
Since a couple of days I’ve been asking myself, assuming I had nothing else to do, is it possible to do such a close follow up? That’s when I decide to do the math.</p>

<p><img class="center" src="/images/2016-01-26-is-it-realistic-to-manage-closely-several-agile-teams/calculator.jpg"></p>

<p>For one team, per iteration of two weeks, I will need to allocate:    <br/>
- 3 hours for the demo/sprint planning   <br/>
- 2 hours to retrospect<br/>
- 2 hours to participate to the backlog grooming  <br/>
- 10 x 15 minutes of daily stand up</p>

<p>This leads us to 9 hours and 30 minutes per team every two weeks, multiplying this by 8 leads us to a total of 76 hours. So at the end doing the close follow up with all teams will require me to allocate 38 hours per week for this activity alone; a full time job!</p>

<p>Although this seem to fit in my working hours habit I doubt I will go that way.<br/>
Why? Because the expectations from my new role go beyond that, I have other duties to fulfill that are part of the role and that are time consuming too, nearly half of my time.</p>

<p>So what next? Well no doubt, I’ll need to make a choice, follow the most important things and delegate the rest.<br/>
First action is to ask a team member to play the role of the scrum master for a given iteration. All team members will play this role in a round robin fashion. <br/>
Second action is to skip attending the daily standups, this will let me gain back 10 hours per week, and I believe the teams will be able to conduct them efficiently on their own with the help of the assigned scrum master.</p>

<p>Next step will be to opt out from the retrospectives once the team is used to conducting them. Of course I will provide my notes to a team member and ask him to represent me. This will let me on the long term get back 8 hours.</p>

<p>So in total I will need to allocate 20 hours per week to perform the remaining activities which seem reasonable. I believe this close follow up will yield to a better results, I’ll be trying this and learning from the experience.</p>

<p>Interested in the outcome? Stay tuned.</p>

<p><img class="center" src="/images/2016-01-26-is-it-realistic-to-manage-closely-several-agile-teams/scrum-glasses.jpg"></p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/ansik/304526237/" title="calculator">calculator</a> <a href="https://creativecommons.org/licenses/by/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/neighborhoodnini/9650231200/" title="Perpetual Scrum Google Glasses">Perpetual Scrum Google Glasses</a> <a href="https://creativecommons.org/licenses/by-nd/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/cadsonline/470108485/" title="scrum diagram">scrum diagram</a> <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">(license)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beating The Meeting Run]]></title>
    <link href="http://bilal.eltayara.net/blog/2015/10/19/beating-the-meeting-run/"/>
    <updated>2015-10-19T20:00:46+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2015/10/19/beating-the-meeting-run</id>
    <content type="html"><![CDATA[<p>Just one full week in my new job, that&rsquo;s what it took me  to experience a new kind of sport, the &ldquo;Meeting Run&rdquo;.<br/>
And as a good friend of mine would say, like everything there are always two sides. <br/>
In what I experienced I encountered a good one and a bad one (and no there&rsquo;s no <a href="http://www.imdb.com/title/tt0060196/">ugly</a> one, at least not yet).</p>

<p><img class="center" src="/images/2015-10-19-beating-the-meeting-run/time.png"></p>

<!-- more -->


<p>
The good side was that my <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.fitness&amp;hl=fr">Google Fit application</a> started congratulating me everyday for meeting my 1 hour walking goal, and sometimes I would even hit that by noon!</p>

<p>In 15 years in software development, it never happened to me during work days ! (yes I know you might argue that smartphones and activity tracking applications are rather recent, so you&rsquo;ll have to take my word for that).   <br/>
This is great news, I finally managed to exercise and work at the same time, there&rsquo;s a hope for me to loose the kilos I gained this summer!</p>

<p>And as you might suspect there&rsquo;s no free lunch so where&rsquo;s the catch? <br/>
Well here&rsquo;s the bad side ; since all meetings were adjacent, it was just impossible for me to arrive at time to any meeting.<br/>
And it really annoyed me, I always used to do my best to be at most on time if not a couple of minutes before. <br/>
But I admit when I was able to do this my calendar looked a little bit different than it is now.<br/>
The same pattern occurred the whole week, and I started getting calls from people waiting for me in the next meeting.</p>

<p>That&rsquo;s it, this is the end, I said to myself sadly ; bye bye punctuality and welcome reality &hellip;<br/>
Fortunately a little voice in my head was whispering &ldquo;no, no, no&rdquo; and when I paid attention I heard it say &ldquo;&hellip; <a href="https://en.wikipedia.org/wiki/Broken_windows_theory">broken window theory</a> &hellip; <a href="https://en.wikibooks.org/wiki/Professionalism/Diane_Vaughan_and_the_normalization_of_deviance">normalization of deviance</a> &hellip;&rdquo;. <br/>
And it just hit me, it was clear to me that I was slipping into these anti-patterns.</p>

<p><img class="center" src="/images/2015-10-19-beating-the-meeting-run/broken-window.png"></p>

<p>Accepting being late to meeting is a clear illustration of &ldquo;Diane Vaughan&rsquo;s normalization of deviance&rdquo;.</p>

<blockquote><p>&ldquo;Social normalization of deviance means that people within the organization become so much accustomed to a deviant behavior that they don&rsquo;t consider it as deviant, <br/>
despite the fact that they far exceed their own rules for the elementary safety&rdquo;. People grow more accustom to the deviant behavior the more it occurs. To people outside of the organization, <br/>
the activities seem deviant; however, people within the organization do not recognize the deviance because it is seem as a normal occurrence. <br/>
In hindsight, people within the organization realize that their seemingly normal behavior was deviant.</p></blockquote>

<p>And worse, it&rsquo;s the first broken window I&rsquo;m inviting to my work habits. What next, I&rsquo;ll start accepting code with less quality, shipping untested code to production, and end up considering compiler warnings as just normal messages! <br/>
NO, NO, NO, this is not an option. <br/>
But how to avoid that?  How to avoid adjacent meetings? One might be tempted by defining a process to manage his calendar.  <br/>
And start thinking about rules, like meetings should not be adjacent, or they should never be scheduled to start at hh:00 but rather hh:05.<br/>
But how to enforce that, you might think about developing an outlook extension for that &hellip; <br/>
That was really compelling for the software engineer in me, but for the pragmatic developer it looked complex and too much, it also required everybody to be aligned with the rules when booking meetings.  <br/>
I needed something that I can achieve on my own, where I have full control to apply it, something that would be simple.</p>

<p><img class="center" src="/images/2015-10-19-beating-the-meeting-run/punctuality.png"></p>

<p>Suddenly it all became clear. The solution is simple, do like the <a href="https://www.bitcoinmining.com/">Bitcoin miner</a>. A Bitcoin miner will keep a small fee for himself when validating a transaction.<br/>
All I have to do is the same, I&rsquo;ll just apply a tax to the meeting time and take 5 minutes for me.<br/>
This will let me leave the meeting 5 minutes early, of course I&rsquo;ll inform people at the start that I&rsquo;ll be leaving early.<br/>
And that&rsquo;s it ! A simple and actionable solution.  <br/>
Abiding by this rule I will hopefully get back punctuality and avoid annoying people by arriving late to meetings.</p>

<p><strong>So from now on, if you&rsquo;re in a meeting with me, be advised, there&rsquo;s a fee, I&rsquo;ll be leaving 5 minutes early!  </strong></p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/smemon/4961717384/" title="time">time</a> <a href="https://creativecommons.org/licenses/by-sa/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/26008085@N07/2739411797/" title="Broken Windows Theory In Action">Broken Windows Theory In Action</a> <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/artistick-nik/5616580252/" title="punctuality">punctuality</a> <a href="https://creativecommons.org/licenses/by-nd/2.0/">(license)</a></p>
]]></content>
  </entry>
  
</feed>
