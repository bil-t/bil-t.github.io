<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software development | Bilal El Tayara]]></title>
  <link href="http://bilal.eltayara.net/blog/categories/software-development/atom.xml" rel="self"/>
  <link href="http://bilal.eltayara.net/"/>
  <updated>2018-06-03T19:35:40+00:00</updated>
  <id>http://bilal.eltayara.net/</id>
  <author>
    <name><![CDATA[El Tayara Bilal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beware The Too-Fast, Too-Soon Trap]]></title>
    <link href="http://bilal.eltayara.net/blog/2017/10/22/beware-the-too-fast/"/>
    <updated>2017-10-22T13:35:17+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2017/10/22/beware-the-too-fast</id>
    <content type="html"><![CDATA[<p>On the 16th of October 2017 took place the <a href="https://conferences.oreilly.com/software-architecture/sa-eu/public/schedule/grid/public/2017-10-16">O&#8217;Reilly Software Architecture Conference</a> in London. During the first two days, I attended to keynotes and talks where the <a href="https://conferences.oreilly.com/software-architecture/sa-eu/public/schedule/speakers">speakers</a> shared their learning and thoughts on software architecture, architects roles, architecture documentation, developers skills both technical and soft.</p>

<p>If you&rsquo;re in the enterprise software development space, you&rsquo;re probably aware that two types of categories of businesses exist out there, the ones that have a micro-services architecture and are practicing continuous deployment, and the others struggling to get there, dealing with their fat old <a href="https://en.wikipedia.org/wiki/Monolithic_system">monolithic</a> application. Clearly, the monolithic architecture is still heavily present in the industry and the move towards modularity is still a case by case challenge.</p>

<p>What I heard in the talks and during my discussions with the experts, surprised me and reassured me at the same time. When it comes to breaking down the monolith, all seemed to agree on a common approach, a pragmatic approach.</p>

<p>It started in the key notes, with <a href="http://www.oreilly.com/pub/au/3609">Mark Richards</a> using the <a href="https://en.wikipedia.org/wiki/Steeplechase">Steeplechase</a> metaphor to explain how companies should move towards micro-services.</p>

<p><a href="/images/2017-10-22-beware-the-too-fast/steeplechase.jpg"><img class="center" src="/images/2017-10-22-beware-the-too-fast/steeplechase.jpg"></a></p>

<!-- more -->


<p>In summary, what Mark says, companies moving from monolithic application to a <a href="https://en.wikipedia.org/wiki/Microservices">micro-services</a> architecture are like a person that never rode a horse, starts directly practicing steeplechase. Obviously the person is going to fall, and the fall will be hard.
The common sense would be to first learn how to ride a horse, and then to learn how to ride fast, and then and only then you try steeplechase.</p>

<p>Applying this approach to the monolithic application means that the first step is to move to a <a href="https://en.wikipedia.org/wiki/Service-oriented_architecture">service oriented architecture</a> (SOA), this doesn&rsquo;t require <a href="https://en.wikipedia.org/wiki/DevOps">DevOps</a>, it doesn&rsquo;t require organizational change either, and no deployment model change.
After this first step, the move to micro-services can be initiated. Mark Richards recipe is not to move the whole application but rather start by the portion that are customer facing and where a micro-service model will bring added value to the customer.</p>

<p>A bit later, while discussing with <a href="https://conferences.oreilly.com/software-architecture/sa-eu/public/schedule/speaker/278928">James Thompson</a> on learning culture in software development organizations, I asked him if he faces situation where the developers eagerness to learn new stuff could put technological choices at risk. He smiles and deliberately tells me &ldquo;<em>I always choose boring technologies</em>&rdquo;. He recommends to stick proven technology as long as it does the job ; &ldquo;<em>if postgersql can do the job, don&rsquo;t use mongodb just because it&rsquo;s webscale</em>&rdquo;. For him, the real challenge is knowing  when to invest in new technology that represent real value to the organization. His recipe to tackling this, is to work on moving the team from a developer mindset to an engineering mindset. A mindset that cares about the product being built and that cares to have a rigorous process from writing code to deployment and customer experience. For James, what could hinder companies in such approach, is the long client feedback loop, the longer it is the harder is to make the shift. Inhis opinion, only organizational changes can help overcoming the feedback loop issue.</p>

<p><a href="/images/2017-10-22-beware-the-too-fast/learning.jpg"><img class="center" src="/images/2017-10-22-beware-the-too-fast/learning.jpg"></a></p>

<p>On another &ldquo;meet the experts&rdquo; session, I had the chance to assist to a round table with <a href="http://samnewman.io/">Sam Newman</a>. As author of the book <a href="http://samnewman.io/books/building_microservices/">Building Microservices</a>, it was only normal to ask him how one can move form monolithic application to a micro-services architectures. And again I was happy to hear a pragmatic answer advising people to seek for modularity first before jumping to micro-services. His point of view is that modularisation still bring a lot of value, start from what the language can bring you ; if you&rsquo;re in java use java modules or jars ; having a clean modular architecture is the first step. And then and only consider moving to a microservice what would bring more value to the product and the customer, &ldquo;&hellip; the goal is not to move the application to a micro-services architecture, but rather to make it bring  in the money to the company&hellip;&rdquo; he said laughing out loud !  Again his point was about taking the time to learn and get familiar with micro-services before moving towards, and after that only to move once the value of the shift is identified.</p>

<p>Finally, in his talk about <a href="Cloud%20Native%20Designs">Cloud Native Designs</a>, <a href="https://conferences.oreilly.com/software-architecture/sa-eu/public/schedule/speaker/122725">Michael Hausenblas</a> states the same idea when it comes to moving to DevOps. He describes a  Cloud Native Dev and Ops Maturity Model, with four different levels and again stresses on the necessity to go through the maturity levels one level at the time. It&rsquo;s a learning path, and by jumping too fast too early the risk of failing is high.
To sum it all up, one of my major takeaway from these talks and discussions is the <strong>baby steps approach</strong>, the importance of <strong>taking the time to learn</strong> before jumping into new things, and moreover the importance to <strong>be guided by the value</strong> the change will bring to the organization.</p>

<p><a href="/images/2017-10-22-beware-the-too-fast/path.jpg"><img class="center" src="/images/2017-10-22-beware-the-too-fast/path.jpg"></a></p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/elchurro/7237903054/" title="Learning">Learning</a> <a href="https://creativecommons.org/licenses/by-sa/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/vegaseddie/6944135089/" title="Huge Leap From Horse">Huge Leap From Horse</a> <a href="https://creativecommons.org/licenses/by/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/dhdesign/1032756532/" title="Bush Path">Bush Path</a> <a href="https://creativecommons.org/licenses/by/2.0/">(license)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Software Development Team]]></title>
    <link href="http://bilal.eltayara.net/blog/2016/04/30/building-a-software-development-team/"/>
    <updated>2016-04-30T22:06:14+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2016/04/30/building-a-software-development-team</id>
    <content type="html"><![CDATA[<p>Trying to build an effective software development team ?
Here are some key elements that might help you.
<a href="/images/2016-04-30-building-a-software-development-team/Building_a_Software_Development_Team.png"><img class="center" src="/images/2016-04-30-building-a-software-development-team/Building_a_Software_Development_Team.png"></a></p>

<!-- more -->


<p>Building a Software Development Team</p>

<blockquote><p>SCRUM</p>

<blockquote><p>Provide a SCRUM training for the team</p>

<p>Convince all team members take the lead in a round robin fashion on the scrum ceremonies facilitation (Sprint Review &amp; Planning, Retrospectives &hellip;)</p>

<p>Define the DoR : Definition of Ready</p>

<blockquote><p>Clear Acceptance test<br/>
Shared minimal design</p></blockquote>

<p>Define the DoD : Definition of Done</p>

<blockquote><p>Build pipeline is green<br/>
Minimal documentation</p></blockquote>

<p>Regular Backlog Grooming<br/>
Poker Estimation</p>

<blockquote><p>Story point as time unit is not allowed</p></blockquote></blockquote>

<p>Ops</p>

<blockquote><p>Configure a continuous integration pipline</p>

<blockquote><p>Build (includes unit tests)<br/>
Code Inspection<br/>
Integration Tests<br/>
Performance Tests<br/>
Automate Tests</p></blockquote>

<p>Define Quality Gates</p>

<p>Build Pipline Monitor</p></blockquote>

<p>Code</p>

<blockquote><p>TDD / Test First</p>

<p>Clean Code</p>

<blockquote><p>Simple Design</p>

<blockquote><p>First make it work, then make it simple, only then make it fast<br/>
KISS<br/>
YAGNI<br/>
SOLID<br/>
Modular</p></blockquote>

<p>Understandable code</p>

<blockquote><p>Clear Naming<br/>
Comment Unclear Parts of Code<br/>
Self-documenting Code<br/>
Cohesive Methods and Classes</p></blockquote>

<p>Follow the Boy Scout Rule Leave your code better than you found it</p></blockquote></blockquote>

<p>Team Work</p>

<blockquote><p>Define Work Agreements</p>

<p>Collective Code Ownership</p>

<blockquote><p>Define Team Coding Conventions</p></blockquote>

<p>Continuous Improvement Culture</p>

<blockquote><p>Improvement and exploration tasks are part of the sprint backlog</p></blockquote></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Don't Like The @author Tags]]></title>
    <link href="http://bilal.eltayara.net/blog/2016/03/03/why-i-dont-like-the-at-author-tags/"/>
    <updated>2016-03-03T23:59:53+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2016/03/03/why-i-dont-like-the-at-author-tags</id>
    <content type="html"><![CDATA[<p>The <a href="https://en.wikipedia.org/wiki/Javadoc">JavaDoc</a> has a <a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#@author">@author</a> tag that can be used to assign a programmer at the overview, package and class level.<br/>
As a software engineer working in a team I never liked this tag.<br/>
As I became a development manager, my unlikeness increased even more.<br/>
This feeling is fed by negative impacts on both the &ldquo;<a href="http://www.extremeprogramming.org/rules/collective.html">Collective Ownership</a>&rdquo; and the &ldquo;<a href="https://en.wikipedia.org/wiki/Bus_factor">Bus factor</a>&rdquo;.</p>

<p><img class="center" src="/images/2016-03-03-why-i-dont-like-the-at-author-tags/share.jpg"></p>

<!-- more -->


<p></p>

<p><a href="http://www.extremeprogramming.org/rules/collective.html">Collective Ownership</a> is an <a href="https://en.wikipedia.org/wiki/Extreme_programming">Extreme Programming</a> rule that encourages everyone to contribute to all parts of the code.<br/>
Any developer can change any line of code to add functionality, fix bugs, improve designs or refactor.<br/>
Collective Ownership mentality is great because every developer feels like he own the code.<br/>
This drives quality up and fuels the passion that leads to inspiration.<br/>
I&rsquo;m a strong believer in the benefits of this approach and always encouraging my development teams to adopt it.</p>

<p>The <a href="https://en.wikipedia.org/wiki/Bus_factor">Bus factor</a> is the answer to a simple question: &ldquo;how many people would need to get hit by a bus before this code collapses due to lack of knowledgeable or competent personnel?&rdquo; <br/>
You want that number to be high.</p>

<p>The <a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#@author">@author</a> tag is a signpost telling everyone else to stay away:
&ldquo;I&rsquo;m the owner, this file belongs to me, no one else should touch it or at best you need to ask for my permission before modifying the code&rdquo;.</p>

<p><img class="center" src="/images/2016-03-03-why-i-dont-like-the-at-author-tags/do-not-touch.jpg"></p>

<p>It creates an single developer ownership mentality of portions of the code driving the bus factor toward one, and thus putting the project at risk.</p>

<p>If you&rsquo;re using the <a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#@author">@author</a> tag, I hope I convinced you to stop or at least made you aware of its danger.</p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/opensourceway/5752191166/" title="Improving the speed and quality of research via shared algorithm implementations">Improving the speed and quality of research via shared algorithm implementations</a> <a href="https://creativecommons.org/licenses/by-sa/2.0/">(license)</a>,
<a href="https://www.flickr.com/photos/luccawithcheese/3467529252/" title="You Don't touch the MOMA">You Don&rsquo;t touch the MOMA</a> <a href="https://creativecommons.org/licenses/by-nc/2.0/">(license)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is It Realistic To Manage Closely Several Agile Teams]]></title>
    <link href="http://bilal.eltayara.net/blog/2016/01/26/is-it-realistic-to-manage-closely-several-agile-teams/"/>
    <updated>2016-01-26T00:20:30+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2016/01/26/is-it-realistic-to-manage-closely-several-agile-teams</id>
    <content type="html"><![CDATA[<p>I have been recently promoted to manage a division in software development department of my company.<br/>
Till then I was used to managing one team at a once, not exceeding 10 people in size.<br/>
Now I find myself with 8 teams to manage having each a size ranging from 4 to 7 people.</p>

<p>In my previous role I was comfortable with adopting the SCRUM agile framework and quite used to play the role of the scrum master and to participate actively to the product owner role. <br/>
Some of the new teams were already trying to follow the agile practices, some were still working with rather a traditional waterfall approach.
So naturally I found myself driving the teams to adopt the SCRUM framework.
I made sure to share with them my return on experience and to point out the pitfalls and the small details that can make a difference.</p>

<p><img class="center" src="/images/2016-01-26-is-it-realistic-to-manage-closely-several-agile-teams/scrum.png"></p>

<p>Fortunately for me the resistance to change was less than expected. <br/>
All the teams were eager to try the new framework and to improve their agile practices.    <br/>
This is when things start to get a bit more complicated.</p>

<!-- more -->


<p></p>

<p>Among the teams that had tried agile methods, some had tried the SCRUM framework before but ended up by letting it go. Some accommodated the framework with what they thought it would suit them better and thus were practicing a modified custom version.</p>

<p>This reminded me of the caveat entitled <a href="https://books.google.fr/books?id=pjLcBAAAQBAJ&amp;pg=PT21&amp;lpg=PT21&amp;dq=%22Do+not+change+scrum%22&amp;source=bl&amp;ots=ZLjZe7HpGC&amp;sig=fZakjNenlohycnYqsULErZxMPlY&amp;hl=fr&amp;sa=X&amp;ved=0ahUKEwiVm-C3gMbKAhXLthoKHcC1AKgQ6AEIHzAA#v=onepage&amp;q&amp;f=false"><strong><em>Do not change scrum</em></strong> <em>in The Enterprise and Scrum (by Ken Schwaber)</em></a></p>

<p>Having observed that, it was clear to me that I had to bring the teams to the required level of understanding of the methodology and to help them in the adoption and ramp up phase.</p>

<p>Doing that was not a problem for me, on the contrary I enjoy playing the role of the scrum master in an agile development team. The problem was rather a capacity one, will I have enough time to do it right.</p>

<p>You might say, sure it won’t take that long to train a group of people to an agile methodology. <br/>
I can’t disagree with that, after all I had my scrum master certification after a two days training.<br/>
But what I also know, is that it took me nearly two years of practice to be able to take full advantage of the framework. So when I say doing it right, I mean working closely with each team trying to share with them what I learnt and helping them reaching the tipping point to becoming agile.</p>

<p>The couple of teams I had selected to start with showed high appreciation of the help they received and I could instantly see the difference and the positive impact on their day to day job.</p>

<p>But till now I haven’t managed to keep a regular pace to assist closely all the teams in this adoption process and this doesn’t make me feel satisfied. With all the responsibilities I have to assume I never get the time needed to accompany the teams in all of their agile ceremonies.<br/>
Since a couple of days I’ve been asking myself, assuming I had nothing else to do, is it possible to do such a close follow up? That’s when I decide to do the math.</p>

<p><img class="center" src="/images/2016-01-26-is-it-realistic-to-manage-closely-several-agile-teams/calculator.jpg"></p>

<p>For one team, per iteration of two weeks, I will need to allocate:    <br/>
- 3 hours for the demo/sprint planning   <br/>
- 2 hours to retrospect<br/>
- 2 hours to participate to the backlog grooming  <br/>
- 10 x 15 minutes of daily stand up</p>

<p>This leads us to 9 hours and 30 minutes per team every two weeks, multiplying this by 8 leads us to a total of 76 hours. So at the end doing the close follow up with all teams will require me to allocate 38 hours per week for this activity alone; a full time job!</p>

<p>Although this seem to fit in my working hours habit I doubt I will go that way.<br/>
Why? Because the expectations from my new role go beyond that, I have other duties to fulfill that are part of the role and that are time consuming too, nearly half of my time.</p>

<p>So what next? Well no doubt, I’ll need to make a choice, follow the most important things and delegate the rest.<br/>
First action is to ask a team member to play the role of the scrum master for a given iteration. All team members will play this role in a round robin fashion. <br/>
Second action is to skip attending the daily standups, this will let me gain back 10 hours per week, and I believe the teams will be able to conduct them efficiently on their own with the help of the assigned scrum master.</p>

<p>Next step will be to opt out from the retrospectives once the team is used to conducting them. Of course I will provide my notes to a team member and ask him to represent me. This will let me on the long term get back 8 hours.</p>

<p>So in total I will need to allocate 20 hours per week to perform the remaining activities which seem reasonable. I believe this close follow up will yield to a better results, I’ll be trying this and learning from the experience.</p>

<p>Interested in the outcome? Stay tuned.</p>

<p><img class="center" src="/images/2016-01-26-is-it-realistic-to-manage-closely-several-agile-teams/scrum-glasses.jpg"></p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/ansik/304526237/" title="calculator">calculator</a> <a href="https://creativecommons.org/licenses/by/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/neighborhoodnini/9650231200/" title="Perpetual Scrum Google Glasses">Perpetual Scrum Google Glasses</a> <a href="https://creativecommons.org/licenses/by-nd/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/cadsonline/470108485/" title="scrum diagram">scrum diagram</a> <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">(license)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beating The Meeting Run]]></title>
    <link href="http://bilal.eltayara.net/blog/2015/10/19/beating-the-meeting-run/"/>
    <updated>2015-10-19T20:00:46+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2015/10/19/beating-the-meeting-run</id>
    <content type="html"><![CDATA[<p>Just one full week in my new job, that&rsquo;s what it took me  to experience a new kind of sport, the &ldquo;Meeting Run&rdquo;.<br/>
And as a good friend of mine would say, like everything there are always two sides. <br/>
In what I experienced I encountered a good one and a bad one (and no there&rsquo;s no <a href="http://www.imdb.com/title/tt0060196/">ugly</a> one, at least not yet).</p>

<p><img class="center" src="/images/2015-10-19-beating-the-meeting-run/time.png"></p>

<!-- more -->


<p>
The good side was that my <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.fitness&amp;hl=fr">Google Fit application</a> started congratulating me everyday for meeting my 1 hour walking goal, and sometimes I would even hit that by noon!</p>

<p>In 15 years in software development, it never happened to me during work days ! (yes I know you might argue that smartphones and activity tracking applications are rather recent, so you&rsquo;ll have to take my word for that).   <br/>
This is great news, I finally managed to exercise and work at the same time, there&rsquo;s a hope for me to loose the kilos I gained this summer!</p>

<p>And as you might suspect there&rsquo;s no free lunch so where&rsquo;s the catch? <br/>
Well here&rsquo;s the bad side ; since all meetings were adjacent, it was just impossible for me to arrive at time to any meeting.<br/>
And it really annoyed me, I always used to do my best to be at most on time if not a couple of minutes before. <br/>
But I admit when I was able to do this my calendar looked a little bit different than it is now.<br/>
The same pattern occurred the whole week, and I started getting calls from people waiting for me in the next meeting.</p>

<p>That&rsquo;s it, this is the end, I said to myself sadly ; bye bye punctuality and welcome reality &hellip;<br/>
Fortunately a little voice in my head was whispering &ldquo;no, no, no&rdquo; and when I paid attention I heard it say &ldquo;&hellip; <a href="https://en.wikipedia.org/wiki/Broken_windows_theory">broken window theory</a> &hellip; <a href="https://en.wikibooks.org/wiki/Professionalism/Diane_Vaughan_and_the_normalization_of_deviance">normalization of deviance</a> &hellip;&rdquo;. <br/>
And it just hit me, it was clear to me that I was slipping into these anti-patterns.</p>

<p><img class="center" src="/images/2015-10-19-beating-the-meeting-run/broken-window.png"></p>

<p>Accepting being late to meeting is a clear illustration of &ldquo;Diane Vaughan&rsquo;s normalization of deviance&rdquo;.</p>

<blockquote><p>&ldquo;Social normalization of deviance means that people within the organization become so much accustomed to a deviant behavior that they don&rsquo;t consider it as deviant, <br/>
despite the fact that they far exceed their own rules for the elementary safety&rdquo;. People grow more accustom to the deviant behavior the more it occurs. To people outside of the organization, <br/>
the activities seem deviant; however, people within the organization do not recognize the deviance because it is seem as a normal occurrence. <br/>
In hindsight, people within the organization realize that their seemingly normal behavior was deviant.</p></blockquote>

<p>And worse, it&rsquo;s the first broken window I&rsquo;m inviting to my work habits. What next, I&rsquo;ll start accepting code with less quality, shipping untested code to production, and end up considering compiler warnings as just normal messages! <br/>
NO, NO, NO, this is not an option. <br/>
But how to avoid that?  How to avoid adjacent meetings? One might be tempted by defining a process to manage his calendar.  <br/>
And start thinking about rules, like meetings should not be adjacent, or they should never be scheduled to start at hh:00 but rather hh:05.<br/>
But how to enforce that, you might think about developing an outlook extension for that &hellip; <br/>
That was really compelling for the software engineer in me, but for the pragmatic developer it looked complex and too much, it also required everybody to be aligned with the rules when booking meetings.  <br/>
I needed something that I can achieve on my own, where I have full control to apply it, something that would be simple.</p>

<p><img class="center" src="/images/2015-10-19-beating-the-meeting-run/punctuality.png"></p>

<p>Suddenly it all became clear. The solution is simple, do like the <a href="https://www.bitcoinmining.com/">Bitcoin miner</a>. A Bitcoin miner will keep a small fee for himself when validating a transaction.<br/>
All I have to do is the same, I&rsquo;ll just apply a tax to the meeting time and take 5 minutes for me.<br/>
This will let me leave the meeting 5 minutes early, of course I&rsquo;ll inform people at the start that I&rsquo;ll be leaving early.<br/>
And that&rsquo;s it ! A simple and actionable solution.  <br/>
Abiding by this rule I will hopefully get back punctuality and avoid annoying people by arriving late to meetings.</p>

<p><strong>So from now on, if you&rsquo;re in a meeting with me, be advised, there&rsquo;s a fee, I&rsquo;ll be leaving 5 minutes early!  </strong></p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/smemon/4961717384/" title="time">time</a> <a href="https://creativecommons.org/licenses/by-sa/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/26008085@N07/2739411797/" title="Broken Windows Theory In Action">Broken Windows Theory In Action</a> <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/artistick-nik/5616580252/" title="punctuality">punctuality</a> <a href="https://creativecommons.org/licenses/by-nd/2.0/">(license)</a></p>
]]></content>
  </entry>
  
</feed>
