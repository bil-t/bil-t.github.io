<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software development | Bilal El Tayara]]></title>
  <link href="http://bilal.eltayara.net/blog/categories/software-development/atom.xml" rel="self"/>
  <link href="http://bilal.eltayara.net/"/>
  <updated>2016-03-04T00:57:58+00:00</updated>
  <id>http://bilal.eltayara.net/</id>
  <author>
    <name><![CDATA[El Tayara Bilal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why I Don't Like The @author Tags]]></title>
    <link href="http://bilal.eltayara.net/blog/2016/03/03/why-i-dont-like-the-at-author-tags/"/>
    <updated>2016-03-03T23:59:53+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2016/03/03/why-i-dont-like-the-at-author-tags</id>
    <content type="html"><![CDATA[<p>The <a href="https://en.wikipedia.org/wiki/Javadoc">JavaDoc</a> has a <a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#@author">@author</a> tag that can be used to assign a programmer at the overview, package and class level.<br/>
As a software engineer working in a team I never liked this tag.<br/>
As I became a development manager, my unlikeness increased even more.<br/>
This feeling is fed by negative impacts on both the &ldquo;<a href="http://www.extremeprogramming.org/rules/collective.html">Collective Ownership</a>&rdquo; and the &ldquo;<a href="https://en.wikipedia.org/wiki/Bus_factor">Bus factor</a>&rdquo;.</p>

<p><img class="center" src="/images/2016-03-03-why-i-dont-like-the-at-author-tags/share.jpg"></p>

<!-- more -->


<p></p>

<p><a href="http://www.extremeprogramming.org/rules/collective.html">Collective Ownership</a> is an <a href="https://en.wikipedia.org/wiki/Extreme_programming">Extreme Programming</a> rule that encourages everyone to contribute to all parts of the code.<br/>
Any developer can change any line of code to add functionality, fix bugs, improve designs or refactor.<br/>
Collective Ownership mentality is great because every developer feels like he own the code.<br/>
This drives quality up and fuels the passion that leads to inspiration.<br/>
I&rsquo;m a strong believer in the benefits of this approach and always encouraging my development teams to adopt it.</p>

<p>The <a href="https://en.wikipedia.org/wiki/Bus_factor">Bus factor</a> is the answer to a simple question: &ldquo;how many people would need to get hit by a bus before this code collapses due to lack of knowledgeable or competent personnel?&rdquo; <br/>
You want that number to be high.</p>

<p>The <a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#@author">@author</a> tag is a signpost telling everyone else to stay away:
&ldquo;I&rsquo;m the owner, this file belongs to me, no one else should touch it or at best you need to ask for my permission before modifying the code&rdquo;.</p>

<p><img class="center" src="/images/2016-03-03-why-i-dont-like-the-at-author-tags/do-not-touch.jpg"></p>

<p>It creates an single developer ownership mentality of portions of the code driving the bus factor toward one, and thus putting the project at risk.</p>

<p>If you&rsquo;re using the <a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#@author">@author</a> tag, I hope I convinced you to stop or at least made you aware of its danger.</p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/opensourceway/5752191166/" title="Improving the speed and quality of research via shared algorithm implementations">Improving the speed and quality of research via shared algorithm implementations</a> <a href="https://creativecommons.org/licenses/by-sa/2.0/">(license)</a>,
<a href="https://www.flickr.com/photos/luccawithcheese/3467529252/" title="You Don't touch the MOMA">You Don&rsquo;t touch the MOMA</a> <a href="https://creativecommons.org/licenses/by-nc/2.0/">(license)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is It Realistic To Manage Closely Several Agile Teams]]></title>
    <link href="http://bilal.eltayara.net/blog/2016/01/26/is-it-realistic-to-manage-closely-several-agile-teams/"/>
    <updated>2016-01-26T00:20:30+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2016/01/26/is-it-realistic-to-manage-closely-several-agile-teams</id>
    <content type="html"><![CDATA[<p>I have been recently promoted to manage a division in software development department of my company.<br/>
Till then I was used to managing one team at a once, not exceeding 10 people in size.<br/>
Now I find myself with 8 teams to manage having each a size ranging from 4 to 7 people.</p>

<p>In my previous role I was comfortable with adopting the SCRUM agile framework and quite used to play the role of the scrum master and to participate actively to the product owner role. <br/>
Some of the new teams were already trying to follow the agile practices, some were still working with rather a traditional waterfall approach.
So naturally I found myself driving the teams to adopt the SCRUM framework.
I made sure to share with them my return on experience and to point out the pitfalls and the small details that can make a difference.</p>

<p><img class="center" src="/images/2016-01-26-is-it-realistic-to-manage-closely-several-agile-teams/scrum.png"></p>

<p>Fortunately for me the resistance to change was less than expected. <br/>
All the teams were eager to try the new framework and to improve their agile practices.    <br/>
This is when things start to get a bit more complicated.</p>

<!-- more -->


<p></p>

<p>Among the teams that had tried agile methods, some had tried the SCRUM framework before but ended up by letting it go. Some accommodated the framework with what they thought it would suit them better and thus were practicing a modified custom version.</p>

<p>This reminded me of the caveat entitled <a href="https://books.google.fr/books?id=pjLcBAAAQBAJ&amp;pg=PT21&amp;lpg=PT21&amp;dq=%22Do+not+change+scrum%22&amp;source=bl&amp;ots=ZLjZe7HpGC&amp;sig=fZakjNenlohycnYqsULErZxMPlY&amp;hl=fr&amp;sa=X&amp;ved=0ahUKEwiVm-C3gMbKAhXLthoKHcC1AKgQ6AEIHzAA#v=onepage&amp;q&amp;f=false"><strong><em>Do not change scrum</em></strong> <em>in The Enterprise and Scrum (by Ken Schwaber)</em></a></p>

<p>Having observed that, it was clear to me that I had to bring the teams to the required level of understanding of the methodology and to help them in the adoption and ramp up phase.</p>

<p>Doing that was not a problem for me, on the contrary I enjoy playing the role of the scrum master in an agile development team. The problem was rather a capacity one, will I have enough time to do it right.</p>

<p>You might say, sure it won’t take that long to train a group of people to an agile methodology. <br/>
I can’t disagree with that, after all I had my scrum master certification after a two days training.<br/>
But what I also know, is that it took me nearly two years of practice to be able to take full advantage of the framework. So when I say doing it right, I mean working closely with each team trying to share with them what I learnt and helping them reaching the tipping point to becoming agile.</p>

<p>The couple of teams I had selected to start with showed high appreciation of the help they received and I could instantly see the difference and the positive impact on their day to day job.</p>

<p>But till now I haven’t managed to keep a regular pace to assist closely all the teams in this adoption process and this doesn’t make me feel satisfied. With all the responsibilities I have to assume I never get the time needed to accompany the teams in all of their agile ceremonies.<br/>
Since a couple of days I’ve been asking myself, assuming I had nothing else to do, is it possible to do such a close follow up? That’s when I decide to do the math.</p>

<p><img class="center" src="/images/2016-01-26-is-it-realistic-to-manage-closely-several-agile-teams/calculator.jpg"></p>

<p>For one team, per iteration of two weeks, I will need to allocate:    <br/>
- 3 hours for the demo/sprint planning   <br/>
- 2 hours to retrospect<br/>
- 2 hours to participate to the backlog grooming  <br/>
- 10 x 15 minutes of daily stand up</p>

<p>This leads us to 9 hours and 30 minutes per team every two weeks, multiplying this by 8 leads us to a total of 76 hours. So at the end doing the close follow up with all teams will require me to allocate 38 hours per week for this activity alone; a full time job!</p>

<p>Although this seem to fit in my working hours habit I doubt I will go that way.<br/>
Why? Because the expectations from my new role go beyond that, I have other duties to fulfill that are part of the role and that are time consuming too, nearly half of my time.</p>

<p>So what next? Well no doubt, I’ll need to make a choice, follow the most important things and delegate the rest.<br/>
First action is to ask a team member to play the role of the scrum master for a given iteration. All team members will play this role in a round robin fashion. <br/>
Second action is to skip attending the daily standups, this will let me gain back 10 hours per week, and I believe the teams will be able to conduct them efficiently on their own with the help of the assigned scrum master.</p>

<p>Next step will be to opt out from the retrospectives once the team is used to conducting them. Of course I will provide my notes to a team member and ask him to represent me. This will let me on the long term get back 8 hours.</p>

<p>So in total I will need to allocate 20 hours per week to perform the remaining activities which seem reasonable. I believe this close follow up will yield to a better results, I’ll be trying this and learning from the experience.</p>

<p>Interested in the outcome? Stay tuned.</p>

<p><img class="center" src="/images/2016-01-26-is-it-realistic-to-manage-closely-several-agile-teams/scrum-glasses.jpg"></p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/ansik/304526237/" title="calculator">calculator</a> <a href="https://creativecommons.org/licenses/by/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/neighborhoodnini/9650231200/" title="Perpetual Scrum Google Glasses">Perpetual Scrum Google Glasses</a> <a href="https://creativecommons.org/licenses/by-nd/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/cadsonline/470108485/" title="scrum diagram">scrum diagram</a> <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">(license)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beating The Meeting Run]]></title>
    <link href="http://bilal.eltayara.net/blog/2015/10/19/beating-the-meeting-run/"/>
    <updated>2015-10-19T20:00:46+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2015/10/19/beating-the-meeting-run</id>
    <content type="html"><![CDATA[<p>Just one full week in my new job, that&rsquo;s what it took me  to experience a new kind of sport, the &ldquo;Meeting Run&rdquo;.<br/>
And as a good friend of mine would say, like everything there are always two sides. <br/>
In what I experienced I encountered a good one and a bad one (and no there&rsquo;s no <a href="http://www.imdb.com/title/tt0060196/">ugly</a> one, at least not yet).</p>

<p><img class="center" src="/images/2015-10-19-beating-the-meeting-run/time.png"></p>

<!-- more -->


<p>
The good side was that my <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.fitness&amp;hl=fr">Google Fit application</a> started congratulating me everyday for meeting my 1 hour walking goal, and sometimes I would even hit that by noon!</p>

<p>In 15 years in software development, it never happened to me during work days ! (yes I know you might argue that smartphones and activity tracking applications are rather recent, so you&rsquo;ll have to take my word for that).   <br/>
This is great news, I finally managed to exercise and work at the same time, there&rsquo;s a hope for me to loose the kilos I gained this summer!</p>

<p>And as you might suspect there&rsquo;s no free lunch so where&rsquo;s the catch? <br/>
Well here&rsquo;s the bad side ; since all meetings were adjacent, it was just impossible for me to arrive at time to any meeting.<br/>
And it really annoyed me, I always used to do my best to be at most on time if not a couple of minutes before. <br/>
But I admit when I was able to do this my calendar looked a little bit different than it is now.<br/>
The same pattern occurred the whole week, and I started getting calls from people waiting for me in the next meeting.</p>

<p>That&rsquo;s it, this is the end, I said to myself sadly ; bye bye punctuality and welcome reality &hellip;<br/>
Fortunately a little voice in my head was whispering &ldquo;no, no, no&rdquo; and when I paid attention I heard it say &ldquo;&hellip; <a href="https://en.wikipedia.org/wiki/Broken_windows_theory">broken window theory</a> &hellip; <a href="https://en.wikibooks.org/wiki/Professionalism/Diane_Vaughan_and_the_normalization_of_deviance">normalization of deviance</a> &hellip;&rdquo;. <br/>
And it just hit me, it was clear to me that I was slipping into these anti-patterns.</p>

<p><img class="center" src="/images/2015-10-19-beating-the-meeting-run/broken-window.png"></p>

<p>Accepting being late to meeting is a clear illustration of &ldquo;Diane Vaughan&rsquo;s normalization of deviance&rdquo;.</p>

<blockquote><p>&ldquo;Social normalization of deviance means that people within the organization become so much accustomed to a deviant behavior that they don&rsquo;t consider it as deviant, <br/>
despite the fact that they far exceed their own rules for the elementary safety&rdquo;. People grow more accustom to the deviant behavior the more it occurs. To people outside of the organization, <br/>
the activities seem deviant; however, people within the organization do not recognize the deviance because it is seem as a normal occurrence. <br/>
In hindsight, people within the organization realize that their seemingly normal behavior was deviant.</p></blockquote>

<p>And worse, it&rsquo;s the first broken window I&rsquo;m inviting to my work habits. What next, I&rsquo;ll start accepting code with less quality, shipping untested code to production, and end up considering compiler warnings as just normal messages! <br/>
NO, NO, NO, this is not an option. <br/>
But how to avoid that?  How to avoid adjacent meetings? One might be tempted by defining a process to manage his calendar.  <br/>
And start thinking about rules, like meetings should not be adjacent, or they should never be scheduled to start at hh:00 but rather hh:05.<br/>
But how to enforce that, you might think about developing an outlook extension for that &hellip; <br/>
That was really compelling for the software engineer in me, but for the pragmatic developer it looked complex and too much, it also required everybody to be aligned with the rules when booking meetings.  <br/>
I needed something that I can achieve on my own, where I have full control to apply it, something that would be simple.</p>

<p><img class="center" src="/images/2015-10-19-beating-the-meeting-run/punctuality.png"></p>

<p>Suddenly it all became clear. The solution is simple, do like the <a href="https://www.bitcoinmining.com/">Bitcoin miner</a>. A Bitcoin miner will keep a small fee for himself when validating a transaction.<br/>
All I have to do is the same, I&rsquo;ll just apply a tax to the meeting time and take 5 minutes for me.<br/>
This will let me leave the meeting 5 minutes early, of course I&rsquo;ll inform people at the start that I&rsquo;ll be leaving early.<br/>
And that&rsquo;s it ! A simple and actionable solution.  <br/>
Abiding by this rule I will hopefully get back punctuality and avoid annoying people by arriving late to meetings.</p>

<p><strong>So from now on, if you&rsquo;re in a meeting with me, be advised, there&rsquo;s a fee, I&rsquo;ll be leaving 5 minutes early!  </strong></p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/smemon/4961717384/" title="time">time</a> <a href="https://creativecommons.org/licenses/by-sa/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/26008085@N07/2739411797/" title="Broken Windows Theory In Action">Broken Windows Theory In Action</a> <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/artistick-nik/5616580252/" title="punctuality">punctuality</a> <a href="https://creativecommons.org/licenses/by-nd/2.0/">(license)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Things Every Software Development Manager Should Do]]></title>
    <link href="http://bilal.eltayara.net/blog/2015/05/13/3-things-every-software-development-manager-should-do/"/>
    <updated>2015-05-13T20:07:01+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2015/05/13/3-things-every-software-development-manager-should-do</id>
    <content type="html"><![CDATA[<p>Here are three practices that I found to be of a great help in my day-to-day work as software development manager.</p>

<!-- more -->


<p></p>

<h2>Inspection is your friend</h2>

<p>It&rsquo;s crucial to know how your code source health is.
Complex code tend to have a high maintenance cost and makes entry cost higher for a newcomer. Failing to apply best practices and recommendations can result in various bugs. A poor test coverage makes future development very likely to introduce regressions.<br/>
Static and dynamic analysis are you best friends to give you accurate indicators about your code health. They also help you take appropriate actions to cure the spotted deficiencies.<br/>
If you don&rsquo;t have this yet in place, all it takes is these simple steps:<br/>
1. Start by setting up a continuous code analysis process for your source code<br/>
2. Define a quality profile and break the build whenever the quality gateway is violated<br/>
3. Every time an issue is fixed, adjust the quality gate accordingly</p>

<p><img class="center" src="/images/2015-05-13-3-things-every-software-development-manager-should-do/inspection.jpg"></p>

<h2>Better double-check</h2>

<p>Static and dynamic code analysis can help you track the source code health but when it comes to technical design they are rather limited.<br/>
When software development manager drifts away from the code because of other duties that require his attention, code review can be a good help.<br/>
By reviewing the changes regularly the software development manager can stay up to date with the design changes and can intervene at an early stage if needed.
How to do it? By a continuous automated code review generation process:<br/>
1. Automatically create a code review for each new change<br/>
2. Keep the pace, perform the review regularly</p>

<p><img class="center" src="/images/2015-05-13-3-things-every-software-development-manager-should-do/diff.jpg"></p>

<h2>Get your hands dirty</h2>

<p>Quite often the software development manager doesn&rsquo;t have room anymore for coding. Unfortunately this can make him unaware of the coding conditions, pain-points and other important factors. If the team fail to give him a comprehensive feedback this can result in negative outcomes. <br/>
My suggestion, make room to code. Besides giving you an accurate idea of the work conditions of your team, you&rsquo;ll enjoy performing what initially made you want this job.</p>

<p><img class="center" src="/images/2015-05-13-3-things-every-software-development-manager-should-do/hack.jpg"></p>

<h2><br></h2>

<p><em>photo credits:</em> <a href="https://www.flickr.com/photos/dumindaxsb/2873528646" title="On Screen Magnification by Duminda Jayasena, sur Flickr">On Screen Magnification</a> <a href="https://creativecommons.org/licenses/by/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/jblyberg/3942639156" title="My eyes are starting to hurt by John Blyberg, sur Flickr">My eyes are starting to hurt</a> <a href="https://creativecommons.org/licenses/by/2.0/">(license)</a>, <a href="https://www.flickr.com/photos/adulau/5136853276" title="Chris Nickerson at hack.lu 2010 by Alexandre Dulaunoy, sur Flickr">Chris Nickerson at hack.lu 2010</a> <a href="https://creativecommons.org/licenses/by-sa/2.0/">(license)</a></p>
]]></content>
  </entry>
  
</feed>
