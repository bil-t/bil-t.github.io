<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: agile | Bilal El Tayara]]></title>
  <link href="http://bilal.eltayara.net/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://bilal.eltayara.net/"/>
  <updated>2017-07-27T21:09:19+00:00</updated>
  <id>http://bilal.eltayara.net/</id>
  <author>
    <name><![CDATA[El Tayara Bilal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Agile Managers, A Blind Spot?]]></title>
    <link href="http://bilal.eltayara.net/blog/2017/07/27/agile-managers/"/>
    <updated>2017-07-27T20:20:14+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2017/07/27/agile-managers</id>
    <content type="html"><![CDATA[<p>When deploying lean and agility a lot of recommendation exist on how to take care of your collaborators during this change process. <br/>
In the literature, agile experts insist a lot on the necessity to pay attention in giving the right level of empowerment to teams and individuals. Teams are encouraged to self-organize, to take things in hand and work actively on improving their deliverable and their process.<br/>
Moreover, management is asked to provide a safe environment that foster experimentation and give the team the right to learn from its failures.<br/>
The manager role is banished in all agile frameworks, and rather replaced by team supporting roles, such as Scrum Master and Product Owner in SCRUM framework. These new roles are rather focused on helping the team reach its goals in a servant-leader manner. <br/>
All this looks great, self-organization, empowerment, decentralized decision making &hellip; teamwork sounds great in an agile world, but unfortunately there&rsquo;s a caveat.</p>

<p><a href="/images/2017-07-27-agile-managers/and-pretty-agile.jpg.jpg"><img class="center" src="/images/2017-07-27-agile-managers/and-pretty-agile.jpg"></a></p>

<!-- more -->


<p>Often lean and agile frameworks are deployed and applied to the corporate process delivering values while the organization remain the same. For the company board, managers are still part of the organizational chart and are still accountable on achieving the business goals. The same managers to which agile experts are saying to let go, give the teams autonomy and a safe environment. But what about these managers, who is giving them the safe environment to let go? How a manager accountable for his teams’ deliveries can feel safe while he&rsquo;s accountable on the performance of his teams.  Well the obvious answer is, in the same way he should provide a safe environment for his collaborators, his superiors should equally provide him with one to operate within, self-organize and learn. <br/>
From this, it&rsquo;s clear that, when it comes to agility, the whole chain of command should apply the same principles.  Traditional command and control management is incompatible with the mission command style of agile teams, thus breaking the agile chain will only lead to failure. <br/>
Deploying agility in enterprise can&rsquo;t be done only for business processes it should be holistic and include the organizational processes too. Even more in case of phased deployment, enterprise should rather start by deploying agility to the organizational processes to shift the mindsets and interactions, doing this will facilitate the deployment of agility for business processes and increase the chances of success. <br/>
Unfortunately, most of the enterprises, if not all, start deploying agility to business processes. The choice is usually driven by the gains perceived in improving the business processes, while ignoring the strong dependency on the organizational processes. The irony is that the agile product management practices should have helped to get the correct sequencing, and the enterprise most probably used transnational management practices to plan and deploy agility! Food for thought &hellip;</p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/92981898@N04/15680262966/" title="...and pretty agile">&hellip;and pretty agile</a> <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">(license)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turn The Software Development Team Around With Scrum]]></title>
    <link href="http://bilal.eltayara.net/blog/2017/05/07/turn-the-software-development-team-around-with-scrum/"/>
    <updated>2017-05-07T13:56:53+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2017/05/07/turn-the-software-development-team-around-with-scrum</id>
    <content type="html"><![CDATA[<p>In his book, <a href="https://www.amazon.fr/Turn-Ship-Around-Building-Breaking/dp/0241250943">Turn The Ship Around!</a>, <a href="http://www.davidmarquet.com/">L. David Marquet</a> tells us how he transformed the culture of a united states submarine from a leader-follower culture to a leader-leader culture.<br/>
Moreover, he proves the benefits of this cultural change that made the submarine crew improve from the least to the most effective one.<br/>
While reading this book, thing that I enjoyed and recommend, I couldn&rsquo;t help but projecting the ideas explained in the book against my experience with agile software development teams and more specifically the SCRUM framework usage. The book made me see the different practices and principles used in <a href="https://www.scrumalliance.org/why-scrum/core-scrum-values-roles">SCRUM</a> under a new and interesting perspective.<br/>
I&rsquo;ll try to share this with you in this blog-post.</p>

<p><a href="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/submarine.jpg"><img class="center" src="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/submarine.jpg"></a></p>

<!-- more -->


<p>The first concept that caught my attention in the book is around <strong>control</strong>. The author speaks about the importance of delegating control and decision making authority, and provides some of mechanisms to implement this. I chose to zoom on the following ones: <strong>Short, Early Conversations Make Efficient Work</strong>, <strong>Use &ldquo;Intend to &hellip;&rdquo; to Turn Passive Followers into Active Leaders</strong>, <strong>Eliminate Top-Down Monitoring Systems</strong>, <strong>Think Out Loud</strong>.<br/>
You must be wondering by now, what does that have to do with agility and software development. Well in agile software development, autonomy is one of the main characteristics for team effectiveness, delegating control and decision making is contributing to the autonomy of the teams and individuals. It&rsquo;s clear that we are on the same page here.<br/>
Adopting short and early conversations to improve efficiency is just another way to describe the following agile principle: &ldquo;The most efficient and effective method of conveying information to and within a development team is face-to-face conversation&rdquo;. The similarities don&rsquo;t stop here, when applying SCRUM, the Daily stand-up ritual makes the team adopt the &ldquo;I intend to &hellip;&rdquo; mechanism. Moreover, SCRUM offers many opportunities for team members to adopt a &ldquo;think out loud&rdquo; mechanism, whether in backlog grooming sessions, poker estimations, sprint reviews, daily stand-ups, and retrospectives.<br/>
SCRUM teams commit on their deliveries in sprint plannings and naturally monitor and report their progress to their stakeholders in sprint reviews, thus eliminating the top down monitoring activity. It&rsquo;s not uncommon to see SCRUM teams producing indicators on their progress, the quality of their work, and making use of visual monitoring in order to share the information.</p>

<p><a href="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/la-conversation.jpg"><img class="center" src="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/la-conversation.jpg"></a></p>

<p>The second concept in the book is about <strong>competence</strong>, continuously improving it and acquiring new ones.<br/>
SCRUM enables this continuous learning approach for teams. For instance the retrospective is the dedicated ceremony in SCRUM to inspect how the team is doing and define improvement actions.  It&rsquo;s also common for effective SCRUM team to leave some &ldquo;slack&rdquo; in their backlog to work on some innovations and learning tasks. Moreover, it&rsquo;s usual  for software development teams adopting SCRUM to also adopt the extreme programming principles, the latter introduces several practices aiming to improve the teams competence like pair programming and code review. <br/>
Going back to the agile software development teams characteristics it&rsquo;s clear that with the competence concern we&rsquo;re hitting the mastery characteristic the team should have to become effective.</p>

<p><a href="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/skills.jpg"><img class="center" src="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/skills.jpg"></a></p>

<p>Last the author speaks about the <strong>clarity</strong> and it&rsquo;s importance when applying the previous principles.<br/>
In SCRUM clarity of the goals is achieved through the customer collaboration, the recurrent sprint review and sprint planning sessions. The introduction the product owner role within the team helps in clarifying the goals anytime it&rsquo;s needed. So last but not least we get to the third main characteristic necessary for an agile software development team; the purpose.</p>

<p><a href="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/clarity.jpg"><img class="center" src="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/clarity.jpg"></a></p>

<p>In summary, in Turn The Ship Around!, L. David Marquet tells a story of deploying autonomy, mastery and purpose to a submarine crew and making it improve from a below average score to the highest score. The SCRUM agile framework, when applied correctly, can help you do the same for software development teams.</p>

<p><a href="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/scrum.jpg"><img class="center" src="/images/2017-05-07-turn-the-software-development-team-around-with-scrum/scrum.jpg"></a></p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/rascoop/5367935297/" title="US Submarine existing Curacao harbour">US Submarine existing Curacao harbour</a> <a href="https://creativecommons.org/licenses/by-nc/2.0/">(license)</a>,
<a href="https://www.flickr.com/photos/guillaume-andreux/34373378291/" title="La conversation">La conversation</a> <a href="https://creativecommons.org/licenses/by-sa/2.0/">(license)</a>,
<a href="https://www.flickr.com/photos/danielle-chang/4910485601/" title="skills">skills</a> <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">(license)</a>,
<a href="https://www.flickr.com/photos/34690904@N02/33554170264/" title="clarity">clarity</a> <a href="https://creativecommons.org/licenses/by/2.0/">(license)</a>,
<a href="https://www.flickr.com/photos/cgt/8064378807/" title="scrum">scrum</a> <a href="https://creativecommons.org/licenses/by-nc/2.0/">(license)</a>,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Agile Autonomous Teams : A Paradox ?]]></title>
    <link href="http://bilal.eltayara.net/blog/2017/02/25/managing-agile-autonomous-teams-a-paradox/"/>
    <updated>2017-02-25T18:31:50+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2017/02/25/managing-agile-autonomous-teams-a-paradox</id>
    <content type="html"><![CDATA[<p>Agile teams are known to be autonomous and self-organizing.  <br/>
When I started fostering agility and encouraging autonomy and self-organization for the teams I work with, It was only normal to to face a situation where teams decided to do things their way, under the name of autonomy and self-organization. <br/>
The problem was that the direction they were heading in was not going to lead to the collective success of the enterprise.<br/>
My role was to help them succeed, thus I had the challenge of directing them while helping them improve their agility and thus their autonomy and self organization.<br/>
Is that an impossible equation to solve ?</p>

<!-- more -->


<p>If you&rsquo;re new to agility you might think that this a proof that agility fails in an enterprise context and is only meant for a small team.<br/>
Fortunately it&rsquo;s not the case, agility, when well understood and applied, works at scale and delivers its promises.<br/>
Autonomy of agile teams is a must but it&rsquo;s not sufficient, along that, teams in an enterprise context need alignment.
Autonomy without alignment will only lead to anarchy, and this is something you don&rsquo;t want. Anarchy rarely leads to success.  <br/>
Only when both alignment and autonomy are present, agile teams can become successful.</p>

<p>This is greatly illustrated by <a href="http://blog.crisp.se/author/henrikkniberg">Henrik Kniberg</a> in the “<a href="http://blog.crisp.se/2014/03/27/henrikkniberg/spotify-engineering-culture-part-1">Spotify Engineering Culture</a>” and several of this talks.</p>

<p><a href="/images/2017-02-25-managing-agile-autonomous-teams-a-paradox/autonomy-alignment-kniberg.png"><img class="center" src="/images/2017-02-25-managing-agile-autonomous-teams-a-paradox/autonomy-alignment-kniberg.png"></a></p>

<blockquote><ul>
<li>Down here is low alignment and low autonomy. Micromanagement Culture, no high level purpose just shut up and follow orders.</li>
<li>Up here is high Alignment, but low autonomy. So leaders are good communicating what problems needs to be solved, but also they are telling people how to solve it.</li>
<li>High Alignment and High Autonomy means leaders focus on what problems to solve but let the teams figure out how to solve it</li>
<li>What about down here then? Low alignment and high autonomy. Means teams do whatever they want…</li>
</ul>
</blockquote>

<p>But how do teams get alignment ?</p>

<p>As alignment aim to make several teams work toward the same goals, it&rsquo;s by design an external factor to the teams.<br/>
Thus the teams can&rsquo;t achieve alignment on their own.<br/>
Agile managers are still an important piece of the puzzle, and fit naturally in the agile context.   <br/>
By helping teams getting alignment, they provide them with one of the necessary ingredients for their success.</p>

<p><a href="/images/2017-02-25-managing-agile-autonomous-teams-a-paradox/velib.jpg"><img class="center" src="/images/2017-02-25-managing-agile-autonomous-teams-a-paradox/velib.jpg"></a></p>

<p>I work in a fast-paced and constantly changing work environment, with geographically dispersed and culturally diverse teams, reaching alignment in such context is not an easy task. <br/>
As an agile manager I need to constantly drive alignment, in order to allow autonomy to build. It&rsquo;s about keeping the people and the work progressing in the correct direction toward to the goals, and it&rsquo;s not to be confused by staying &ldquo;on plan&rdquo;.<br/>
To accomplish this I practice consistently communicated, measurable, incremental goals.<br/>
In my next post I&rsquo;ll explain one of the tools I use to bring that guidance to the agile teams.</p>

<h2><br></h2>

<p><em>photo credits:</em> <br/>
<a href="https://www.flickr.com/photos/44904381@N03/4424536847/" title="Vélib 2">Vélib 2</a> <a href="https://creativecommons.org/licenses/by-nc/2.0/">(license)</a>,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working Agreements, A Must Have For Agile Teams]]></title>
    <link href="http://bilal.eltayara.net/blog/2016/11/05/working-agreements/"/>
    <updated>2016-11-05T19:57:29+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2016/11/05/working-agreements</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re reading this you probably have good understanding of agile teams characteristics.
So you know that agile teams are not just a group of individuals working each one alone, on their individual goals or within their area of expertise.   <br/>
And that Agile team members share common goals, work together, and support each other in achieving their commitments, in a all the team succeed or all the team fail spirit. <br/>
Finally, Agile teams are self-organized and their day to day activity involve increased communication and collaboration.</p>

<p>But you might be wondering what make agile teams reach top performance and effectiveness. Interested to know ?</p>

<p><img class="center" src="/images/2016-11-05-working-agreements/f4-1.png"></p>

<!-- more -->


<p>In 1965, Bruce Tuckman was the first to propose a team development model. <br/>
In his model, a team need to go through four stages in order to reach effectiveness and performance.
At the start, the team is formed, members agree on the goals and challenges, they tend to behave individually, this the first stage, called forming.<br/>
A bit later, conflicts will arise as each individual start establishing his position in the group, this is the second stage, it&rsquo;s called storming. <br/>
In the third stage, called norming, clarity for each individual role and consensus are established. The team&rsquo;s performance and effectiveness improve.<br/>
When group norms and roles are established, group members are autonomous and are able to handle the decision-making process without supervision, focusing on achieving common goals, the team reach top performance and effectiveness. It&rsquo;ll be then in the fourth stage, called performing. <br/>
Agile or not, this model applies to any team, and an agile team can accelerate its progress toward performing by
making use of the &ldquo;Working Agreement&rdquo; tool.</p>

<p><img class="center" src="/images/2016-11-05-working-agreements/tuckman.jpg"></p>

<p>So what are &ldquo;Working Agreements&rdquo; ?
<strong>Working agreement</strong> are a set of rules or protocols the team agree to follow when working together.
They help the team meet its goals, establishing a one team culture and developing a sense of shared responsibility.<br/>
They also help team members to increase the awareness of their own behavior and empower each one of them to act.</p>

<p><strong>Working agreements</strong> are owned and set by the team.
All team members have the responsibility to question anyone not following the rules.<br/>
This removes the perception of personal attacks and confrontation.<br/>
Working agreements need to be continuously improved, this can be done by the team regularly asking the question &ldquo;Should we update them?&rdquo;</p>

<p>Good working agreements are focused on amplifying desired patterns of behavior.
They are aimed at helping the team members achieve their tasks and team-work goals.
They can be generalizable and are written with minimum specifications.</p>

<p>Three key elements make working agreements effective in helping the team.
The first one is their importance to the team : working agreements need to be fully supported by each team member, and members are reminded when agreements are not followed.  
The second one is their number: the set of Working agreements need to have a limited number of rules. The team has to review regularly the list to ensure it contains the rules the team needs to focus on.      
The third one is documented: by documented I mean defined and known by all team members. Ideally the should be made visible by posting them on a wall or an electronic board.    
Following these three rules will help you ensure effective working agreements fro your team.  </p>

<p><img class="center" src="/images/2016-11-05-working-agreements/f4-2.png"></p>

<p>A team can setup its first working agreement during a retrospective or a dedicated session.<br/>
The session can be facilitated by the product owner, the scrum master or any other team member.  <br/>
The facilitator start by explaining the why and what of working agreements. <br/>
He then give some examples like: be on time, respect estimates, how to address bugs/fires during Sprint, etc.<br/>
He then ask the team to suggest points that are crucial for their improvement and the reasons why they think those should be work agreements. <br/>
The team then take a vote to pick the top five/seven ideas as a work agreements.
The work doesn&rsquo;t stop here, as I said before, the list should be reviewed regularly, retrospective meeting is an option.<br/>
Once team members feel they are doing well on one agreement, they can replace it with another agreement to focus on. It&rsquo;s a good idea to keep the removed items in a sort of culture book for newcomers, after all the item was removed because it became a habit for the team members and anyone joining the team need to learn about it.</p>

<h2><br></h2>

<p><em>photo credits:</em><br/>
<a href="http://www.moviestillsdb.com/movies/fantastic-four-i1502712" title="Fantastic Four">Fantastic Four | moviestillsdb | Copyright by respective production studio and/or distributor. Intended for editorial use only.</a>, <a href="http://stephengraves.us/category/leadership/" title="Tips on Improving Team Performance">Tips on Improving Team Performance | stephengraves.us (2013).</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6 Things That Can Ruin Your Retrospective]]></title>
    <link href="http://bilal.eltayara.net/blog/2016/07/28/6-things-that-can-ruin-your-retrospective/"/>
    <updated>2016-07-28T20:14:26+00:00</updated>
    <id>http://bilal.eltayara.net/blog/2016/07/28/6-things-that-can-ruin-your-retrospective</id>
    <content type="html"><![CDATA[<p>Continuous improvement is one of the necessary pillars when it comes to Agile.<br/>
Failing to improve your process won&rsquo;t let you unlock its full potential nor reach the benefits promised by Agile.  <br/>
But whether you&rsquo;re practicing agile or not, I&rsquo;m bet that you do care about improving what your doing.  <br/>
Identifying things to improve can be done by conducting a retrospective session.<br/>
Retrospective is a special meeting that takes place at the end of an iteration or a project.<br/>
It is a dedicated moment where the team take time to inspect the work done and try to spot opportunities for improvement.<br/>
Planning and conducting retrospectives is not hard, but some pitfalls might prevent you from getting out the desired outcome. Read on to know what are the 6 things that could ruin your retrospectives.</p>

<!-- more -->


<h1>Totally winging it</h1>

<p><img class="center" src="/images/2016-07-28-6-things-that-can-ruin-your-retrospective/totally-winging-it.jpg">
As any other work session or meeting a retrospective should be structured and activities prepared.<br/>
A retrospective is usually composed from several activities that will help the team spot imrovement opportunities and deduce relevant actions.  <br/>
To achieve this goal the activities need to fit well together, the timing already figured out and sometime materials need to be prepared up-front, like posters, cards, etc.<br/>
Improvising your session will most probably lead to poor outcomes. <br/>
My advise: take the time, 15 to 20 minutes are enough to structure a retrospective.<br/>
Choose a theme and the sequence of the activities, take some time to refresh your memory on how they are conducted, specify the time you&rsquo;re going to allocate to each one. Share the agenda with the team at the start.</p>

<h1>Fighting Hunger</h1>

<p><img class="center" src="/images/2016-07-28-6-things-that-can-ruin-your-retrospective/fighting-hunger.jpg">
<a href="https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs#Physiological_needs">Maslow&rsquo;s hierarchy of needs</a> tells us that food is one of the very basic human needs. <br/>
You need to remeber that whenever you find yourself in the obligation to plan a retrospective during lunchtime.<br/>
It&rsquo;s better to avoid such situation, participants will be only thinking on when the session will end so that they can get to eat. At worst if you can&rsquo;t avoid it, do order food for the team, competing against hunger is a lost battle. <br/>
As a general rule, it&rsquo;s a good idea to have some fruits or candies available for participants. This will help them to remain energized and contributes to the good working atmosphere. <br/>
Don&rsquo;t forget to schedule a short break in the middle of the session, let people get out of the room, fulfill their needs, grab a cup of cofee or a bottle of water.</p>

<h1>Lightning Speed Retrospective</h1>

<p><img class="center" src="/images/2016-07-28-6-things-that-can-ruin-your-retrospective/lightning-speed-retrospective.jpg">
A typical retrospective will take between 1h30min and 2h to deliver good actionable items. It&rsquo;s simply the time needed to collect the data, analyze it and deduce improvement actions.<br/>
If the team is lacking time, the last thing to is to shorten the retrospective. Doing that will only lead to the opposite desired outcome, wasting time on an inefficient session. <br/>
When the team find itself unable to allocate the appropriate time to its retrospective, my advice is to exceptionally skip the occurrence, secure the next retrospective and make sure the team identify what need to be done to avoid hitting the same issue in the future.</p>

<h1>Skipping the Starter</h1>

<p><img class="center" src="/images/2016-07-28-6-things-that-can-ruin-your-retrospective/skipping-the-starter.jpg">
It&rsquo;s a good practice to start any work session with an ice breaker. Why ? Studies have shown that when a  participant in a meeting doesn&rsquo;t speak during the first five minutes, he usually remain silent till the end of the session. <br/>
You don&rsquo;t want that to happen to your retrospective, on the contrary you want all the participants to speak up and share their concerns and ideas on improvement. <br/>
By skipping your check-in activity you are giving each participant the permission to remain silent for the rest of the session.
Spending 5 or 10 minutes in an ice break at the start of the retrospective is good investment to make that can only improve the outcomes.</p>

<h1>Skipping the Desert</h1>

<p><img class="center" src="/images/2016-07-28-6-things-that-can-ruin-your-retrospective/skipping-the-desert.jpg">
Retrospecting is part of your process, so as the rest it can and need to be improved constantly.<br/>
The check-out activity is your opportunity to get feedback from the participants in order to improve the next occurrences.<br/>
Don&rsquo;t skip it, make sure you plan a &ldquo;Return on Time Invested&rdquo; or a &ldquo;Plus/Delta&rdquo; activity to get insights on what can be improved.</p>

<h1>All Talk and No Action</h1>

<p><img class="center" src="/images/2016-07-28-6-things-that-can-ruin-your-retrospective/all-talk-and-no-action.jpg">
Your team is extremely busy and improvement actions are piling up in a todo list somewhere.<br/>
Clearly the teams not improving, and it will soon start loosing faith in retrospectives and see them rather as waste.<br/>
This pitfall can be avoided by simply adding the identified improvement actions to the team backlog and treat them as any other task in the backlog.  Apply to them the same prioritizing technique and plan them accordingly. <br/>
In the Scrum framework this technique is called &ldquo;Scrumming the Scrum&rdquo;.</p>
]]></content>
  </entry>
  
</feed>
